{"version":3,"file":"nivo-calendar.es.js","sources":["../src/CalendarYearLegends.tsx","../src/CalendarMonthPath.tsx","../src/CalendarMonthLegends.tsx","../src/CalendarDay.tsx","../src/CalendarTooltip.tsx","../src/props.ts","../src/compute/calendar.ts","../src/hooks.ts","../src/Calendar.tsx","../src/compute/timeRange.ts","../src/TimeRangeDay.tsx","../src/TimeRange.tsx","../src/ResponsiveTimeRange.tsx","../src/ResponsiveCalendar.tsx","../src/CalendarCanvas.tsx","../src/ResponsiveCalendarCanvas.tsx"],"sourcesContent":["import { CalendarYearLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarYearLegends = memo(({ years, legend, theme }: CalendarYearLegendsProps) => {\n    return (\n        <>\n            {years.map(year => {\n                return (\n                    <text\n                        key={year.year}\n                        transform={`translate(${year.x},${year.y}) rotate(${year.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(year.year)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { CalendarMonthPathProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthPath = memo(\n    ({ path, borderWidth, borderColor }: CalendarMonthPathProps) => {\n        return (\n            <path\n                d={path}\n                style={{\n                    fill: 'none',\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                    pointerEvents: 'none',\n                }}\n            />\n        )\n    }\n)\n","import { CalendarMonthLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthLegends = memo(({ months, legend, theme }: CalendarMonthLegendsProps) => {\n    return (\n        <>\n            {months.map(month => {\n                return (\n                    <text\n                        key={`${month.date.toString()}.legend`}\n                        transform={`translate(${month.x},${month.y}) rotate(${month.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(month.year, month.month, month.date)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { CalendarDayProps } from './types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { memo, useCallback } from 'react'\nimport * as React from 'react'\n\nexport const CalendarDay = memo(\n    ({\n        data,\n        x,\n        y,\n        size,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: CalendarDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseMove && onMouseMove(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => onClick?.(data, event),\n            [data, onClick]\n        )\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                width={size}\n                height={size}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { CalendarTooltipProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarTooltip = memo(({ value, day, color }: CalendarTooltipProps) => {\n    if (value === undefined || isNaN(Number(value))) return null\n    return <BasicTooltip id={day} value={value} color={color} enableChip={true} />\n})\n","import { timeFormat } from 'd3-time-format'\nimport { CalendarLegendProps } from './types'\nimport { CalendarTooltip } from './CalendarTooltip'\n\nconst monthLabelFormat = timeFormat('%b')\n\nconst commonDefaultProps = {\n    colors: ['#61cdbb', '#97e3d5', '#e8c1a0', '#f47560'] as string[],\n\n    align: 'center',\n    direction: 'horizontal',\n    emptyColor: '#fff',\n\n    minValue: 0,\n    maxValue: 'auto',\n\n    yearSpacing: 30,\n    yearLegend: (year: number) => year,\n    yearLegendPosition: 'before',\n    yearLegendOffset: 10,\n\n    monthBorderWidth: 2,\n    monthBorderColor: '#000',\n    monthSpacing: 0,\n    monthLegend: (_year: number, _month: number, date: Date) => monthLabelFormat(date),\n    monthLegendPosition: 'before',\n    monthLegendOffset: 10,\n\n    daySpacing: 0,\n    dayBorderWidth: 1,\n    dayBorderColor: '#000',\n\n    isInteractive: true,\n\n    legends: [] as CalendarLegendProps[],\n    tooltip: CalendarTooltip,\n} as const\n\nexport const calendarDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n} as const\n\nexport const calendarCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n} as const\n\nexport const timeRangeDefaultProps = {\n    ...calendarDefaultProps,\n    dayBorderColor: '#fff',\n    dayRadius: 0,\n    square: true,\n    weekdayLegendOffset: 75,\n} as const\n","import { isDate, memoize, range } from 'lodash'\nimport { alignBox } from '@nivo/core'\nimport { timeFormat } from 'd3-time-format'\nimport { timeDays, timeWeek, timeWeeks, timeMonths, timeYear } from 'd3-time'\nimport { ScaleQuantize } from 'd3-scale'\nimport { BBox, CalendarSvgProps, ColorScale, Datum, Year } from '../types'\n\n/**\n * Compute min/max values.\n */\nexport const computeDomain = (\n    data: CalendarSvgProps['data'],\n    minSpec: NonNullable<CalendarSvgProps['minValue']>,\n    maxSpec: NonNullable<CalendarSvgProps['maxValue']>\n) => {\n    const allValues = data.map(d => d.value)\n    const minValue = minSpec === 'auto' ? Math.min(...allValues) : minSpec\n    const maxValue = maxSpec === 'auto' ? Math.max(...allValues) : maxSpec\n\n    return [minValue, maxValue] as const\n}\n\n/**\n * Compute day cell size according to current context.\n */\nconst computeCellSize = ({\n    width,\n    height,\n    direction,\n    yearRange,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    maxWeeks,\n}: Pick<\n    Required<CalendarSvgProps>,\n    'direction' | 'width' | 'height' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n> & {\n    maxWeeks: number\n    yearRange: number[]\n}) => {\n    let hCellSize\n    let vCellSize\n\n    if (direction === 'horizontal') {\n        hCellSize = (width - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n        vCellSize =\n            (height - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n    } else {\n        hCellSize =\n            (width - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n        vCellSize = (height - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n    }\n\n    return Math.min(hCellSize, vCellSize)\n}\n\n/**\n * Computes month path and bounding box.\n */\nconst monthPathAndBBox = ({\n    date,\n    cellSize,\n    yearIndex,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    direction,\n    originX,\n    originY,\n}: Record<'cellSize' | 'originX' | 'originY' | 'yearIndex', number> &\n    Pick<\n        Required<CalendarSvgProps>,\n        'direction' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n    > & {\n        date: Date\n    }) => {\n    // first day of next month\n    const t1 = new Date(date.getFullYear(), date.getMonth() + 1, 0)\n\n    // ranges\n    const firstWeek = timeWeek.count(timeYear(date), date)\n    const lastWeek = timeWeek.count(timeYear(t1), t1)\n    const firstDay = date.getDay()\n    const lastDay = t1.getDay()\n\n    // offset according to year index and month\n    let xO = originX\n    let yO = originY\n    const yearOffset = yearIndex * (7 * (cellSize + daySpacing) + yearSpacing)\n    const monthOffset = date.getMonth() * monthSpacing\n    if (direction === 'horizontal') {\n        yO += yearOffset\n        xO += monthOffset\n    } else {\n        yO += monthOffset\n        xO += yearOffset\n    }\n\n    let path\n    const bbox = { x: xO, y: yO, width: 0, height: 0 }\n    if (direction === 'horizontal') {\n        path = [\n            `M${xO + (firstWeek + 1) * (cellSize + daySpacing)},${\n                yO + firstDay * (cellSize + daySpacing)\n            }`,\n            `H${xO + firstWeek * (cellSize + daySpacing)}V${yO + 7 * (cellSize + daySpacing)}`,\n            `H${xO + lastWeek * (cellSize + daySpacing)}V${\n                yO + (lastDay + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO + (lastWeek + 1) * (cellSize + daySpacing)}V${yO}`,\n            `H${xO + (firstWeek + 1) * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.x = xO + firstWeek * (cellSize + daySpacing)\n        bbox.width = xO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.x\n        bbox.height = 7 * (cellSize + daySpacing)\n    } else {\n        path = [\n            `M${xO + firstDay * (cellSize + daySpacing)},${\n                yO + (firstWeek + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO}V${yO + (lastWeek + 1) * (cellSize + daySpacing)}`,\n            `H${xO + (lastDay + 1) * (cellSize + daySpacing)}V${\n                yO + lastWeek * (cellSize + daySpacing)\n            }`,\n            `H${xO + 7 * (cellSize + daySpacing)}V${yO + firstWeek * (cellSize + daySpacing)}`,\n            `H${xO + firstDay * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.y = yO + firstWeek * (cellSize + daySpacing)\n        bbox.width = 7 * (cellSize + daySpacing)\n        bbox.height = yO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.y\n    }\n\n    return { path, bbox }\n}\n\n/**\n * Creates a memoized version of monthPathAndBBox function.\n */\nconst memoMonthPathAndBBox = memoize(\n    monthPathAndBBox,\n    ({\n        date,\n        cellSize,\n        yearIndex,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        direction,\n        originX,\n        originY,\n    }) => {\n        return `${date.toString()}.${cellSize}.${yearIndex}.${yearSpacing}.${monthSpacing}.${daySpacing}.${direction}.${originX}.${originY}`\n    }\n)\n\n/**\n * Returns a function to Compute day cell position for horizontal layout.\n */\nconst cellPositionHorizontal = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n            y:\n                originY +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n        }\n    }\n}\n\n/**\n * Returns a function to Compute day cell position for vertical layout.\n */\nconst cellPositionVertical = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n            y:\n                originY +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n        }\n    }\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute base layout, without caring about the current data.\n */\nexport const computeLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'align'\n    | 'direction'\n    | 'from'\n    | 'to'\n    | 'width'\n    | 'height'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n>) => {\n    const fromDate = isDate(from) ? from : new Date(from)\n    const toDate = isDate(to) ? to : new Date(to)\n\n    const yearRange = range(fromDate.getFullYear(), toDate.getFullYear() + 1)\n    const maxWeeks =\n        Math.max(\n            ...yearRange.map(\n                year => timeWeeks(new Date(year, 0, 1), new Date(year + 1, 0, 1)).length\n            )\n        ) + 1\n\n    const cellSize = computeCellSize({\n        width,\n        height,\n        direction,\n        yearRange,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        maxWeeks,\n    })\n\n    const monthsSize = cellSize * maxWeeks + daySpacing * maxWeeks + monthSpacing * 12\n    const yearsSize =\n        (cellSize + daySpacing) * 7 * yearRange.length + yearSpacing * (yearRange.length - 1)\n\n    const calendarWidth = direction === 'horizontal' ? monthsSize : yearsSize\n    const calendarHeight = direction === 'horizontal' ? yearsSize : monthsSize\n    const [originX, originY] = alignBox(\n        {\n            x: 0,\n            y: 0,\n            width: calendarWidth,\n            height: calendarHeight,\n        },\n        {\n            x: 0,\n            y: 0,\n            width,\n            height,\n        },\n        align\n    )\n\n    let cellPosition: ReturnType<typeof cellPositionHorizontal>\n    if (direction === 'horizontal') {\n        cellPosition = cellPositionHorizontal(cellSize, yearSpacing, monthSpacing, daySpacing)\n    } else {\n        cellPosition = cellPositionVertical(cellSize, yearSpacing, monthSpacing, daySpacing)\n    }\n\n    const years: Array<{\n        year: number\n        bbox: BBox\n    }> = []\n\n    let months: Array<{\n        path: string\n        bbox: {\n            x: number\n            y: number\n            width: number\n            height: number\n        }\n        date: Date\n        year: number\n        month: number\n    }> = []\n\n    let days: Array<Omit<Datum, 'color' | 'data' | 'value'>> = []\n\n    yearRange.forEach((year, i) => {\n        const yearStart = new Date(year, 0, 1)\n        const yearEnd = new Date(year + 1, 0, 1)\n\n        days = days.concat(\n            timeDays(yearStart, yearEnd).map(dayDate => {\n                return {\n                    date: dayDate,\n                    day: dayFormat(dayDate),\n                    size: cellSize,\n                    ...cellPosition(originX, originY, dayDate, i),\n                }\n            })\n        )\n\n        const yearMonths = timeMonths(yearStart, yearEnd).map(monthDate => ({\n            date: monthDate,\n            year: monthDate.getFullYear(),\n            month: monthDate.getMonth(),\n            ...memoMonthPathAndBBox({\n                originX,\n                originY,\n                date: monthDate,\n                direction,\n                yearIndex: i,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                cellSize,\n            }),\n        }))\n\n        months = months.concat(yearMonths)\n\n        years.push({\n            year,\n            bbox: {\n                x: yearMonths[0].bbox.x,\n                y: yearMonths[0].bbox.y,\n                width: yearMonths[11].bbox.x - yearMonths[0].bbox.x + yearMonths[11].bbox.width,\n                height: yearMonths[11].bbox.y - yearMonths[0].bbox.y + yearMonths[11].bbox.height,\n            },\n        })\n    })\n\n    return { years, months, days, cellSize, calendarWidth, calendarHeight, originX, originY }\n}\n\n/**\n * Bind current data to computed day cells.\n */\nexport const bindDaysData = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> & {\n    colorScale: ScaleQuantize<string> | ColorScale\n    days: Array<Omit<Datum, 'color' | 'data' | 'value'>>\n}) => {\n    return days.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        if (!dayData) {\n            return { ...day, color: emptyColor }\n        }\n\n        return {\n            ...day,\n            color: colorScale(dayData.value),\n            data: dayData,\n            value: dayData.value,\n        }\n    })\n}\n\nexport const computeYearLegendPositions = ({\n    years,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    years: Year[]\n}) => {\n    return years.map(year => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = year.bbox.x - offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = year.bbox.x + year.bbox.width + offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'vertical' && position === 'before') {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y - offset\n        } else {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y + year.bbox.height + offset\n        }\n\n        return {\n            ...year,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n\nexport const computeMonthLegendPositions = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    months: Month[]\n}) => {\n    return months.map(month => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y - offset\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y + month.bbox.height + offset\n        } else if (direction === 'vertical' && position === 'before') {\n            x = month.bbox.x - offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        } else {\n            x = month.bbox.x + month.bbox.width + offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        }\n\n        return {\n            ...month,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n","import { useMemo } from 'react'\nimport { ScaleQuantize, scaleQuantize } from 'd3-scale'\nimport {\n    computeDomain,\n    computeYearLegendPositions,\n    computeMonthLegendPositions,\n    bindDaysData,\n    computeLayout,\n} from './compute/calendar'\nimport { BBox, CalendarSvgProps, ColorScale, Year } from './types'\n\nexport const useCalendarLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'width'\n    | 'height'\n    | 'from'\n    | 'to'\n    | 'direction'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n    | 'align'\n>) =>\n    useMemo(\n        () =>\n            computeLayout({\n                width,\n                height,\n                from,\n                to,\n                direction,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                align,\n            }),\n        [width, height, from, to, direction, yearSpacing, monthSpacing, daySpacing, align]\n    )\n\nexport const useColorScale = ({\n    data,\n    minValue,\n    maxValue,\n    colors,\n    colorScale,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'minValue' | 'maxValue' | 'colors'> &\n    Pick<CalendarSvgProps, 'colorScale'>) =>\n    useMemo(() => {\n        if (colorScale) return colorScale\n        const domain = computeDomain(data, minValue, maxValue)\n        const defaultColorScale = scaleQuantize<string>().domain(domain).range(colors)\n        return defaultColorScale\n    }, [data, minValue, maxValue, colors, colorScale])\n\nexport const useYearLegends = ({\n    years,\n    direction,\n    yearLegendPosition,\n    yearLegendOffset,\n}: {\n    years: Year[]\n    direction: 'horizontal' | 'vertical'\n    yearLegendPosition: 'before' | 'after'\n    yearLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeYearLegendPositions({\n                years,\n                direction,\n                position: yearLegendPosition,\n                offset: yearLegendOffset,\n            }),\n        [years, direction, yearLegendPosition, yearLegendOffset]\n    )\n\nexport const useMonthLegends = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    monthLegendPosition,\n    monthLegendOffset,\n}: {\n    months: Month[]\n    direction: 'horizontal' | 'vertical'\n    monthLegendPosition: 'before' | 'after'\n    monthLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeMonthLegendPositions({\n                months,\n                direction,\n                position: monthLegendPosition,\n                offset: monthLegendOffset,\n            }),\n        [months, direction, monthLegendPosition, monthLegendOffset]\n    )\n\nexport const useDays = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> &\n    Pick<Parameters<typeof bindDaysData>[0], 'days'> & {\n        colorScale: ScaleQuantize<string> | ColorScale\n    }) =>\n    useMemo(\n        () =>\n            bindDaysData({\n                days,\n                data,\n                colorScale,\n                emptyColor,\n            }),\n        [days, data, colorScale, emptyColor]\n    )\n","import { CalendarSvgProps } from './types'\nimport { Container, SvgWrapper, useTheme, useDimensions, useValueFormatter } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { CalendarYearLegends } from './CalendarYearLegends'\nimport { CalendarMonthPath } from './CalendarMonthPath'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { CalendarDay } from './CalendarDay'\nimport { calendarDefaultProps } from './props'\nimport { useMonthLegends, useYearLegends, useCalendarLayout, useDays, useColorScale } from './hooks'\n\nconst InnerCalendar = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    align = calendarDefaultProps.align,\n    colors = calendarDefaultProps.colors,\n    colorScale,\n    data,\n    direction = calendarDefaultProps.direction,\n    emptyColor = calendarDefaultProps.emptyColor,\n    from,\n    to,\n    minValue = calendarDefaultProps.minValue,\n    maxValue = calendarDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    yearLegend = calendarDefaultProps.yearLegend,\n    yearLegendOffset = calendarDefaultProps.yearLegendOffset,\n    yearLegendPosition = calendarDefaultProps.yearLegendPosition,\n    yearSpacing = calendarDefaultProps.yearSpacing,\n\n    monthBorderColor = calendarDefaultProps.monthBorderColor,\n    monthBorderWidth = calendarDefaultProps.monthBorderWidth,\n    monthLegend = calendarDefaultProps.monthLegend,\n    monthLegendOffset = calendarDefaultProps.monthLegendOffset,\n    monthLegendPosition = calendarDefaultProps.monthLegendPosition,\n    monthSpacing = calendarDefaultProps.monthSpacing,\n\n    dayBorderColor = calendarDefaultProps.dayBorderColor,\n    dayBorderWidth = calendarDefaultProps.dayBorderWidth,\n    daySpacing = calendarDefaultProps.daySpacing,\n\n    isInteractive = calendarDefaultProps.isInteractive,\n    tooltip = calendarDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = calendarDefaultProps.legends,\n    role = calendarDefaultProps.role,\n}: CalendarSvgProps) => {\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const { months, years, ...rest } = useCalendarLayout({\n        width: innerWidth,\n        height: innerHeight,\n        from,\n        to,\n        direction,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        align,\n    })\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n    const yearLegends = useYearLegends({ years, direction, yearLegendPosition, yearLegendOffset })\n    const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n    const formatLegend = useValueFormatter(legendFormat)\n    const formatValue = useValueFormatter(valueFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {days.map(d => (\n                <CalendarDay\n                    key={d.date.toString()}\n                    data={d}\n                    x={d.x}\n                    y={d.y}\n                    size={d.size}\n                    color={d.color}\n                    borderWidth={dayBorderWidth}\n                    borderColor={dayBorderColor}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onMouseMove={onMouseMove}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    formatValue={formatValue}\n                />\n            ))}\n            {months.map(m => (\n                <CalendarMonthPath\n                    key={m.date.toString()}\n                    path={m.path}\n                    borderWidth={monthBorderWidth}\n                    borderColor={monthBorderColor}\n                />\n            ))}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n            <CalendarYearLegends years={yearLegends} legend={yearLegend} theme={theme} />\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Calendar = ({\n    isInteractive = calendarDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendar isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { timeWeek, timeDays, timeDay } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { DateOrString } from '../types'\nimport { isDate } from 'lodash'\n\n// Interfaces\ninterface ComputeBaseProps {\n    direction: 'horizontal' | 'vertical'\n}\n\ninterface ComputeBaseSpaceProps {\n    daySpacing: number\n    offset: number\n}\n\ninterface ComputeBaseDimensionProps {\n    cellWidth: number\n    cellHeight: number\n}\n\ninterface ComputeCellSize extends ComputeBaseProps, ComputeBaseSpaceProps {\n    totalDays: number\n    width: number\n    height: number\n    square: boolean\n}\n\ninterface ComputeCellPositions\n    extends ComputeBaseProps,\n        ComputeBaseSpaceProps,\n        ComputeBaseDimensionProps {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n    colorScale: (value: number) => string\n    emptyColor: string\n}\n\ninterface ComputeWeekdays\n    extends Omit<ComputeBaseProps, 'daysInRange'>,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    ticks?: number[]\n    arrayOfWeekdays?: string[]\n}\n\ninterface Day {\n    coordinates: {\n        x: number\n        y: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n    date: Date\n    color: string\n    day: string\n    value?: number\n}\n\ninterface Month {\n    date: Date\n    bbox: {\n        x: number\n        y: number\n        width: number\n        height: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n}\n\ninterface ComputeMonths\n    extends ComputeBaseProps,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    days: Day[]\n}\n\ninterface ComputeTotalDays {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute day cell size according to\n * current context.\n */\nexport const computeCellSize = ({\n    direction,\n    daySpacing,\n    offset,\n    square,\n    totalDays,\n    width,\n    height,\n}: ComputeCellSize) => {\n    const daysInRange = 7\n    let rows\n    let columns\n    let widthRest = width\n    let heightRest = height\n    if (direction === 'horizontal') {\n        widthRest -= offset\n        rows = daysInRange\n        columns = Math.ceil(totalDays / daysInRange)\n    } else {\n        heightRest -= offset\n        columns = daysInRange\n        rows = Math.ceil(totalDays / daysInRange)\n    }\n    // + 1 since we have to apply spacing to the rigth and left\n    const cellHeight = (heightRest - daySpacing * (rows + 1)) / rows\n    const cellWidth = (widthRest - daySpacing * (columns + 1)) / columns\n    // do we want square?\n    const size = Math.min(cellHeight, cellWidth)\n    return {\n        columns,\n        rows,\n        cellHeight: square ? size : cellHeight,\n        cellWidth: square ? size : cellWidth,\n    }\n}\n\nfunction computeGrid({\n    startDate,\n    date,\n    direction,\n}: {\n    startDate: Date\n    date: Date\n    direction: 'horizontal' | 'vertical'\n}) {\n    const firstWeek = timeWeek.count(startDate, date)\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    let currentColumn = 0\n    let currentRow = 0\n    if (direction === 'horizontal') {\n        currentColumn = firstWeek\n        currentRow = date.getDay()\n    } else {\n        currentColumn = date.getDay()\n        currentRow = firstWeek\n    }\n\n    return { currentColumn, year, currentRow, firstWeek, month, date }\n}\n\nexport const computeCellPositions = ({\n    direction,\n    colorScale,\n    emptyColor,\n    from,\n    to,\n    data,\n    cellWidth,\n    cellHeight,\n    daySpacing,\n    offset,\n}: ComputeCellPositions) => {\n    let x = daySpacing\n    let y = daySpacing\n\n    if (direction === 'horizontal') {\n        x += offset\n    } else {\n        y += offset\n    }\n\n    // we need to determine whether we need to add days to move to correct position\n    const start = from ? from : data[0].date\n    const end = to ? to : data[data.length - 1].date\n    const startDate = isDate(start) ? start : new Date(start)\n    const endDate = isDate(end) ? end : new Date(end)\n    const dateRange = timeDays(startDate, endDate).map(dayDate => {\n        return {\n            date: dayDate,\n            day: dayFormat(dayDate),\n        }\n    })\n\n    const dataWithCellPosition = dateRange.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        const { currentColumn, currentRow, firstWeek, year, month, date } = computeGrid({\n            startDate,\n            date: day.date,\n            direction,\n        })\n\n        const coordinates = {\n            x: x + daySpacing * currentColumn + cellWidth * currentColumn,\n            y: y + daySpacing * currentRow + cellHeight * currentRow,\n        }\n\n        if (!dayData) {\n            return {\n                ...day,\n                coordinates,\n                firstWeek,\n                month,\n                year,\n                date,\n                color: emptyColor,\n                width: cellWidth,\n                height: cellHeight,\n            }\n        }\n\n        return {\n            ...dayData,\n            coordinates,\n            firstWeek,\n            month,\n            year,\n            date,\n            color: colorScale(dayData.value),\n            width: cellWidth,\n            height: cellHeight,\n        }\n    })\n\n    return dataWithCellPosition\n}\n\nexport const computeWeekdays = ({\n    cellHeight,\n    cellWidth,\n    direction,\n    daySpacing,\n    ticks = [1, 3, 5],\n    arrayOfWeekdays = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n    ],\n}: ComputeWeekdays) => {\n    const sizes = {\n        width: cellWidth + daySpacing,\n        height: cellHeight + daySpacing,\n    }\n    return ticks.map(day => ({\n        value: arrayOfWeekdays[day],\n        rotation: direction === 'horizontal' ? 0 : -90,\n        y: direction === 'horizontal' ? sizes.height * (day + 1) - sizes.height / 3 : 0,\n        x: direction === 'horizontal' ? 0 : sizes.width * (day + 1) - sizes.width / 3,\n    }))\n}\n\nexport const computeMonthLegends = ({\n    direction,\n    daySpacing,\n    days,\n    cellHeight,\n    cellWidth,\n}: ComputeMonths) => {\n    const accumulator: {\n        months: { [key: string]: Month }\n        weeks: Day[]\n    } = {\n        months: {},\n        weeks: [],\n    }\n\n    return days.reduce((acc, day) => {\n        if (acc.weeks.length === day.firstWeek) {\n            acc.weeks.push(day)\n\n            const key = `${day.year}-${day.month}`\n\n            if (!Object.keys(acc.months).includes(key)) {\n                const bbox = { x: 0, y: 0, width: 0, height: 0 }\n\n                if (direction === 'horizontal') {\n                    bbox.x = day.coordinates.x - daySpacing\n                    bbox.height = cellHeight + daySpacing\n                    bbox.width = cellWidth + daySpacing * 2\n                } else {\n                    bbox.y = day.coordinates.y - daySpacing\n                    bbox.height = cellHeight + daySpacing * 2\n                    bbox.width = cellWidth + daySpacing * 2\n                }\n\n                acc.months[key] = {\n                    date: day.date,\n                    bbox,\n                    firstWeek: day.firstWeek,\n                    month: 0,\n                    year: 0,\n                }\n            } else {\n                // enhance width/height\n                if (direction === 'horizontal') {\n                    acc.months[key].bbox.width =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellWidth + daySpacing)\n                } else {\n                    acc.months[key].bbox.height =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellHeight + daySpacing)\n                }\n            }\n        }\n        return acc\n    }, accumulator)\n}\n\nexport const computeTotalDays = ({ from, to, data }: ComputeTotalDays) => {\n    let startDate\n    let endDate\n    if (from) {\n        startDate = isDate(from) ? from : new Date(from)\n    } else {\n        startDate = data[0].date\n    }\n\n    if (from && to) {\n        endDate = isDate(to) ? to : new Date(to)\n    } else {\n        endDate = data[data.length - 1].date\n    }\n\n    return startDate.getDay() + timeDay.count(startDate, endDate)\n}\n","import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TimeRangeDayProps } from './types'\n\nexport const TimeRangeDay = memo(\n    ({\n        data,\n        x,\n        ry = 5,\n        rx = 5,\n        y,\n        width,\n        height,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: TimeRangeDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseMove?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            event => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(event => onClick?.(data, event), [data, onClick])\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                rx={rx}\n                ry={ry}\n                width={width}\n                height={height}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { useMemo } from 'react'\nimport { Container, SvgWrapper, useValueFormatter, useTheme, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport {\n    computeWeekdays,\n    computeCellSize,\n    computeCellPositions,\n    computeMonthLegends,\n    computeTotalDays,\n} from './compute/timeRange'\nimport { useMonthLegends, useColorScale } from './hooks'\nimport { TimeRangeDay } from './TimeRangeDay'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { TimeRangeSvgProps } from './types'\nimport { timeRangeDefaultProps } from './props'\n\nconst InnerTimeRange = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    square = timeRangeDefaultProps.square,\n    colors = timeRangeDefaultProps.colors,\n    colorScale,\n    emptyColor = timeRangeDefaultProps.emptyColor,\n    from,\n    to,\n    data: _data,\n    direction = timeRangeDefaultProps.direction,\n    minValue = timeRangeDefaultProps.minValue,\n    maxValue = timeRangeDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    monthLegend = timeRangeDefaultProps.monthLegend,\n    monthLegendOffset = timeRangeDefaultProps.monthLegendOffset,\n    monthLegendPosition = timeRangeDefaultProps.monthLegendPosition,\n\n    weekdayLegendOffset = timeRangeDefaultProps.weekdayLegendOffset,\n    weekdayTicks,\n\n    dayBorderColor = timeRangeDefaultProps.dayBorderColor,\n    dayBorderWidth = timeRangeDefaultProps.dayBorderWidth,\n    daySpacing = timeRangeDefaultProps.daySpacing,\n    dayRadius = timeRangeDefaultProps.dayRadius,\n\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    tooltip = timeRangeDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = timeRangeDefaultProps.legends,\n    role = timeRangeDefaultProps.role,\n}: TimeRangeSvgProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const data = useMemo(\n        () =>\n            _data\n                .map(data => ({ ...data, date: new Date(`${data.day}T00:00:00`) }))\n                .sort((left, right) => left.day.localeCompare(right.day)),\n        [_data]\n    )\n\n    const theme = useTheme()\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n\n    const totalDays = computeTotalDays({\n        from,\n        to,\n        data,\n    })\n\n    const { cellHeight, cellWidth } = computeCellSize({\n        square,\n        offset: weekdayLegendOffset,\n        totalDays: totalDays,\n        width: innerWidth,\n        height: innerHeight,\n        daySpacing,\n        direction,\n    })\n\n    const days = computeCellPositions({\n        offset: weekdayLegendOffset,\n        colorScale: colorScaleFn,\n        emptyColor,\n        cellHeight,\n        cellWidth,\n        from,\n        to,\n        data,\n        direction,\n        daySpacing,\n    })\n\n    // map the days and reduce the month\n    const months = Object.values(\n        computeMonthLegends({\n            daySpacing,\n            direction,\n            cellHeight,\n            cellWidth,\n            days,\n        }).months\n    )\n\n    const weekdayLegends = computeWeekdays({\n        direction,\n        cellHeight,\n        cellWidth,\n        daySpacing,\n        ticks: weekdayTicks,\n    })\n\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n\n    const formatValue = useValueFormatter(valueFormat)\n    const formatLegend = useValueFormatter(legendFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {weekdayLegends.map(legend => (\n                <text\n                    key={legend.value}\n                    transform={`translate(${legend.x},${legend.y}) rotate(${legend.rotation})`}\n                    textAnchor=\"left\"\n                    style={theme.labels.text}\n                >\n                    {legend.value}\n                </text>\n            ))}\n            {days.map(d => {\n                return (\n                    <TimeRangeDay\n                        key={d.date.toString()}\n                        data={d}\n                        x={d.coordinates.x}\n                        rx={dayRadius}\n                        y={d.coordinates.y}\n                        ry={dayRadius}\n                        width={cellWidth}\n                        height={cellHeight}\n                        color={d.color}\n                        borderWidth={dayBorderWidth}\n                        borderColor={dayBorderColor}\n                        onMouseEnter={onMouseEnter}\n                        onMouseLeave={onMouseLeave}\n                        onMouseMove={onMouseMove}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onClick={onClick}\n                        formatValue={formatValue}\n                    />\n                )\n            })}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TimeRange = ({\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: TimeRangeSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerTimeRange isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { TimeRange } from './TimeRange'\nimport { TimeRangeSvgProps } from './types'\n\nexport const ResponsiveTimeRange = (props: Omit<TimeRangeSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TimeRange width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { Calendar } from './Calendar'\nimport { CalendarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveCalendar = (props: Omit<CalendarSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Calendar width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { memo, useRef, useState, useEffect, useCallback } from 'react'\nimport * as React from 'react'\nimport {\n    Box,\n    Container,\n    isCursorInRect,\n    getRelativeCursor,\n    degreesToRadians,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { calendarCanvasDefaultProps } from './props'\nimport { useCalendarLayout, useColorScale, useMonthLegends, useYearLegends, useDays } from './hooks'\nimport { useTooltip } from '@nivo/tooltip'\nimport { CalendarCanvasProps } from './types'\n\nconst findDayUnderCursor = (\n    event: React.MouseEvent,\n    canvasEl: HTMLCanvasElement,\n    days: ReturnType<typeof useDays>,\n    size: number,\n    dayBorderWidth: number,\n    margin: Required<Box>\n) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    return days.find(day => {\n        return (\n            'value' in day &&\n            isCursorInRect(\n                day.x + margin.left - dayBorderWidth / 2,\n                day.y + margin.top - dayBorderWidth / 2,\n                size + dayBorderWidth,\n                size + dayBorderWidth,\n                x,\n                y\n            )\n        )\n    })\n}\n\nconst InnerCalendarCanvas = memo(\n    ({\n        margin: partialMargin,\n        width,\n        height,\n        pixelRatio = calendarCanvasDefaultProps.pixelRatio,\n\n        align = calendarCanvasDefaultProps.align,\n        colors = calendarCanvasDefaultProps.colors,\n        colorScale,\n        data,\n        direction = calendarCanvasDefaultProps.direction,\n        emptyColor = calendarCanvasDefaultProps.emptyColor,\n        from,\n        to,\n        minValue = calendarCanvasDefaultProps.minValue,\n        maxValue = calendarCanvasDefaultProps.maxValue,\n        valueFormat,\n        legendFormat,\n\n        yearLegend = calendarCanvasDefaultProps.yearLegend,\n        yearLegendOffset = calendarCanvasDefaultProps.yearLegendOffset,\n        yearLegendPosition = calendarCanvasDefaultProps.yearLegendPosition,\n        yearSpacing = calendarCanvasDefaultProps.yearSpacing,\n\n        monthLegend = calendarCanvasDefaultProps.monthLegend,\n        monthLegendOffset = calendarCanvasDefaultProps.monthLegendOffset,\n        monthLegendPosition = calendarCanvasDefaultProps.monthLegendPosition,\n        monthSpacing = calendarCanvasDefaultProps.monthSpacing,\n\n        dayBorderColor = calendarCanvasDefaultProps.dayBorderColor,\n        dayBorderWidth = calendarCanvasDefaultProps.dayBorderWidth,\n        daySpacing = calendarCanvasDefaultProps.daySpacing,\n\n        isInteractive = calendarCanvasDefaultProps.isInteractive,\n        tooltip = calendarCanvasDefaultProps.tooltip,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n\n        legends = calendarCanvasDefaultProps.legends,\n    }: CalendarCanvasProps) => {\n        const canvasEl = useRef<HTMLCanvasElement | null>(null)\n        const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n        const { months, years, ...rest } = useCalendarLayout({\n            width: innerWidth,\n            height: innerHeight,\n            from,\n            to,\n            direction,\n            yearSpacing,\n            monthSpacing,\n            daySpacing,\n            align,\n        })\n        const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n        const monthLegends = useMonthLegends({\n            months,\n            direction,\n            monthLegendPosition,\n            monthLegendOffset,\n        })\n        const yearLegends = useYearLegends({\n            years,\n            direction,\n            yearLegendPosition,\n            yearLegendOffset,\n        })\n        const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n        const [currentDay, setCurrentDay] = useState<ReturnType<typeof useDays>[number] | null>(\n            null\n        )\n        const theme = useTheme()\n        const formatValue = useValueFormatter(valueFormat)\n        const formatLegend = useValueFormatter(legendFormat)\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        useEffect(() => {\n            if (!canvasEl.current) return\n\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            if (!ctx) return\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            days.forEach(day => {\n                ctx.fillStyle = day.color\n                if (dayBorderWidth > 0) {\n                    ctx.strokeStyle = dayBorderColor\n                    ctx.lineWidth = dayBorderWidth\n                }\n\n                ctx.beginPath()\n                ctx.rect(day.x, day.y, day.size, day.size)\n                ctx.fill()\n\n                if (dayBorderWidth > 0) {\n                    ctx.stroke()\n                }\n            })\n\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.fillStyle = theme.labels.text.fill ?? ''\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            monthLegends.forEach(month => {\n                ctx.save()\n                ctx.translate(month.x, month.y)\n                ctx.rotate(degreesToRadians(month.rotation))\n                ctx.fillText(String(monthLegend(month.year, month.month, month.date)), 0, 0)\n                ctx.restore()\n            })\n\n            yearLegends.forEach(year => {\n                ctx.save()\n                ctx.translate(year.x, year.y)\n                ctx.rotate(degreesToRadians(year.rotation))\n                ctx.fillText(String(yearLegend(year.year)), 0, 0)\n                ctx.restore()\n            })\n\n            legends.forEach(legend => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                renderLegendToCanvas(ctx, {\n                    ...legend,\n                    data: legendData,\n                    containerWidth: innerWidth,\n                    containerHeight: innerHeight,\n                    theme,\n                })\n            })\n        }, [\n            canvasEl,\n            innerHeight,\n            innerWidth,\n            outerWidth,\n            outerHeight,\n            pixelRatio,\n            margin,\n            days,\n            dayBorderColor,\n            dayBorderWidth,\n            colorScale,\n            yearLegend,\n            yearLegends,\n            monthLegend,\n            monthLegends,\n            legends,\n            theme,\n            formatLegend,\n            colorScaleFn,\n        ])\n\n        const handleMouseHover = useCallback(\n            event => {\n                if (!canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    dayBorderWidth,\n                    margin\n                )\n\n                if (data) {\n                    setCurrentDay(data)\n\n                    if (!('value' in data)) {\n                        return\n                    }\n\n                    const formatedData = {\n                        ...data,\n                        value: formatValue(data.value),\n                        data: { ...data.data },\n                    }\n                    showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                    !currentDay && onMouseEnter?.(data, event)\n                    onMouseMove?.(data, event)\n                    currentDay && onMouseLeave?.(data, event)\n                } else {\n                    hideTooltip()\n                    data && onMouseLeave?.(data, event)\n                }\n            },\n            [\n                canvasEl,\n                currentDay,\n                margin,\n                days,\n                setCurrentDay,\n                formatValue,\n                dayBorderWidth,\n                showTooltipFromEvent,\n                hideTooltip,\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave,\n                tooltip,\n            ]\n        )\n\n        const handleMouseLeave = useCallback(() => {\n            setCurrentDay(null)\n            hideTooltip()\n        }, [setCurrentDay, hideTooltip])\n\n        const handleClick = useCallback(\n            event => {\n                if (!onClick || !canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    daySpacing,\n                    margin\n                )\n\n                data && onClick(data, event)\n            },\n            [canvasEl, daySpacing, margin, days, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                }}\n                onMouseEnter={isInteractive ? handleMouseHover : undefined}\n                onMouseMove={isInteractive ? handleMouseHover : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n\nexport const CalendarCanvas = ({\n    isInteractive = calendarCanvasDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarCanvasProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendarCanvas isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CalendarCanvas } from './CalendarCanvas'\nimport { CalendarCanvasProps } from './types'\n\nexport const ResponsiveCalendarCanvas = (props: Omit<CalendarCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <CalendarCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["CalendarYearLegends","memo","years","legend","theme","_jsx","map","year","transform","x","y","rotation","textAnchor","style","labels","text","CalendarMonthPath","path","borderWidth","borderColor","d","fill","strokeWidth","stroke","pointerEvents","CalendarMonthLegends","months","month","date","toString","CalendarDay","data","size","color","isInteractive","tooltip","onMouseEnter","onMouseMove","onMouseLeave","onClick","formatValue","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","formatedData","value","React","createElement","handleMouseMove","handleMouseLeave","handleClick","width","height","undefined","CalendarTooltip","day","isNaN","Number","BasicTooltip","id","enableChip","monthLabelFormat","timeFormat","commonDefaultProps","colors","align","direction","emptyColor","minValue","maxValue","yearSpacing","yearLegend","yearLegendPosition","yearLegendOffset","monthBorderWidth","monthBorderColor","monthSpacing","monthLegend","_year","_month","monthLegendPosition","monthLegendOffset","daySpacing","dayBorderWidth","dayBorderColor","legends","calendarDefaultProps","role","calendarCanvasDefaultProps","pixelRatio","window","devicePixelRatio","timeRangeDefaultProps","dayRadius","square","weekdayLegendOffset","computeDomain","minSpec","maxSpec","allValues","Math","min","max","memoMonthPathAndBBox","_memoize","cellSize","yearIndex","originX","originY","t1","Date","getFullYear","getMonth","firstWeek","timeWeek","count","timeYear","lastWeek","firstDay","getDay","lastDay","xO","yO","yearOffset","monthOffset","bbox","join","dayFormat","computeLayout","cellPosition","from","to","fromDate","_isDate","toDate","yearRange","_range","maxWeeks","timeWeeks","length","hCellSize","vCellSize","computeCellSize","monthsSize","yearsSize","calendarWidth","calendarHeight","alignBox","cellPositionHorizontal","weekOfYear","cellPositionVertical","days","forEach","i","yearStart","yearEnd","concat","timeDays","dayDate","yearMonths","timeMonths","monthDate","push","bindDaysData","colorScale","dayData","find","item","computeYearLegendPositions","position","offset","computeMonthLegendPositions","useCalendarLayout","useMemo","useColorScale","domain","scaleQuantize","range","useYearLegends","useMonthLegends","useDays","InnerCalendar","partialMargin","margin","valueFormat","legendFormat","useTheme","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","rest","colorScaleFn","monthLegends","yearLegends","formatLegend","useValueFormatter","_jsxs","SvgWrapper","m","legendData","ticks","itemCount","label","BoxLegendSvg","containerWidth","containerHeight","Calendar","renderWrapper","props","Container","rows","columns","totalDays","widthRest","heightRest","ceil","cellHeight","cellWidth","computeCellPositions","start","end","startDate","endDate","dataWithCellPosition","currentColumn","currentRow","computeGrid","coordinates","computeWeekdays","arrayOfWeekdays","sizes","computeMonthLegends","reduce","acc","weeks","key","Object","keys","includes","computeTotalDays","timeDay","TimeRangeDay","ry","rx","InnerTimeRange","_data","weekdayTicks","sort","left","right","localeCompare","values","weekdayLegends","TimeRange","ResponsiveTimeRange","ResponsiveWrapper","ResponsiveCalendar","findDayUnderCursor","canvasEl","getRelativeCursor","isCursorInRect","top","InnerCalendarCanvas","useRef","useState","currentDay","setCurrentDay","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","lineWidth","beginPath","rect","textAlign","textBaseline","font","fontSize","fontFamily","save","rotate","degreesToRadians","fillText","String","restore","renderLegendToCanvas","handleMouseHover","ref","CalendarCanvas","ResponsiveCalendarCanvas"],"mappings":"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"}