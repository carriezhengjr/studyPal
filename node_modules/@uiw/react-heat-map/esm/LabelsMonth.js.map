{
  "version": 3,
  "names": [
    "React",
    "Fragment",
    "useMemo",
    "oneDayTime",
    "LabelsMonth",
    "monthLabels",
    "rectSize",
    "space",
    "leftPad",
    "colNum",
    "startDate",
    "data",
    "Array",
    "map",
    "_",
    "idx",
    "date",
    "Date",
    "getTime",
    "month",
    "getMonth",
    "col",
    "index",
    "day",
    "getDate",
    "monthStr",
    "filter",
    "Boolean",
    "item",
    "list"
  ],
  "sources": [
    "../src/LabelsMonth.tsx"
  ],
  "sourcesContent": [
    "import React, { Fragment, useMemo } from 'react';\nimport { oneDayTime } from './utils';\nimport { SVGProps } from './SVG';\n\nexport interface LablesMonthProps extends React.SVGProps<SVGTextElement> {\n  monthLabels: SVGProps['monthLabels'];\n  rectSize: SVGProps['rectSize'];\n  space: SVGProps['space'];\n  leftPad: number;\n  colNum: number;\n  startDate: SVGProps['startDate'];\n}\n\nexport const LabelsMonth = ({\n    monthLabels = [],\n    rectSize = 0,\n    space = 0,\n    leftPad = 0,\n    colNum = 0,\n    startDate,\n  }: LablesMonthProps) => {\n  const data = useMemo(() => {\n    if (monthLabels === false || colNum < 1) return [];\n    return [...Array(colNum * 7)]\n      .map((_, idx) => {\n        if ((idx / 7) % 1 === 0) {\n          const date = new Date(startDate!.getTime() + idx * oneDayTime);\n          const month = date.getMonth();\n          return { col: idx / 7, index: idx, month, day: date.getDate(), monthStr: monthLabels[month], date };\n        }\n        return null;\n      })\n      .filter(Boolean)\n      .filter((item, idx, list) => list[idx - 1] && list[idx - 1]!.month !== item!.month);\n  }, [colNum, monthLabels, startDate]);\n\n  return useMemo(\n    () => (\n      <Fragment>\n        {[...data].map((item, idx) => {\n          return (\n            <text\n              key={idx}\n              data-size={rectSize}\n              x={leftPad + space + space}\n              y={15}\n              dx={item!.col * (rectSize + space)}\n              textAnchor='start'\n            >\n              {item!.monthStr}\n            </text>\n          );\n        })}\n      </Fragment>\n    ),\n    [data, leftPad, rectSize, space],\n  );\n};\n"
  ],
  "mappings": "AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,SAASC,UAAT,QAA2B,SAA3B;;AAYA,OAAO,IAAMC,WAAW,GAAG,QAOD;EAAA,IAPE;IACxBC,WAAW,GAAG,EADU;IAExBC,QAAQ,GAAG,CAFa;IAGxBC,KAAK,GAAG,CAHgB;IAIxBC,OAAO,GAAG,CAJc;IAKxBC,MAAM,GAAG,CALe;IAMxBC;EANwB,CAOF;EACxB,IAAMC,IAAI,GAAGT,OAAO,CAAC,MAAM;IACzB,IAAIG,WAAW,KAAK,KAAhB,IAAyBI,MAAM,GAAG,CAAtC,EAAyC,OAAO,EAAP;IACzC,OAAO,CAAC,GAAGG,KAAK,CAACH,MAAM,GAAG,CAAV,CAAT,EACJI,GADI,CACA,CAACC,CAAD,EAAIC,GAAJ,KAAY;MACf,IAAKA,GAAG,GAAG,CAAP,GAAY,CAAZ,KAAkB,CAAtB,EAAyB;QACvB,IAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASP,SAAS,CAAEQ,OAAX,KAAuBH,GAAG,GAAGZ,UAAtC,CAAb;QACA,IAAMgB,KAAK,GAAGH,IAAI,CAACI,QAAL,EAAd;QACA,OAAO;UAAEC,GAAG,EAAEN,GAAG,GAAG,CAAb;UAAgBO,KAAK,EAAEP,GAAvB;UAA4BI,KAA5B;UAAmCI,GAAG,EAAEP,IAAI,CAACQ,OAAL,EAAxC;UAAwDC,QAAQ,EAAEpB,WAAW,CAACc,KAAD,CAA7E;UAAsFH;QAAtF,CAAP;MACD;;MACD,OAAO,IAAP;IACD,CARI,EASJU,MATI,CASGC,OATH,EAUJD,MAVI,CAUG,CAACE,IAAD,EAAOb,GAAP,EAAYc,IAAZ,KAAqBA,IAAI,CAACd,GAAG,GAAG,CAAP,CAAJ,IAAiBc,IAAI,CAACd,GAAG,GAAG,CAAP,CAAJ,CAAeI,KAAf,KAAyBS,IAAI,CAAET,KAVxE,CAAP;EAWD,CAbmB,EAajB,CAACV,MAAD,EAASJ,WAAT,EAAsBK,SAAtB,CAbiB,CAApB;EAeA,OAAOR,OAAO,CACZ,mBACE,KAAC,QAAD;IAAA,UACG,CAAC,GAAGS,IAAJ,EAAUE,GAAV,CAAc,CAACe,IAAD,EAAOb,GAAP,KAAe;MAC5B,oBACE;QAEE,aAAWT,QAFb;QAGE,CAAC,EAAEE,OAAO,GAAGD,KAAV,GAAkBA,KAHvB;QAIE,CAAC,EAAE,EAJL;QAKE,EAAE,EAAEqB,IAAI,CAAEP,GAAN,IAAaf,QAAQ,GAAGC,KAAxB,CALN;QAME,UAAU,EAAC,OANb;QAAA,UAQGqB,IAAI,CAAEH;MART,GACOV,GADP,CADF;IAYD,CAbA;EADH,EAFU,EAmBZ,CAACJ,IAAD,EAAOH,OAAP,EAAgBF,QAAhB,EAA0BC,KAA1B,CAnBY,CAAd;AAqBD,CA5CM"
}