{
  "version": 3,
  "names": [
    "React",
    "useEffect",
    "useMemo",
    "useState",
    "LabelsWeek",
    "LabelsMonth",
    "Rect",
    "formatData",
    "getDateToString",
    "existColor",
    "numberSort",
    "isValidDate",
    "oneDayTime",
    "Legend",
    "SVG",
    "props",
    "rectSize",
    "legendCellSize",
    "space",
    "startDate",
    "Date",
    "endDate",
    "rectProps",
    "rectRender",
    "legendRender",
    "value",
    "weekLabels",
    "monthLabels",
    "panelColors",
    "other",
    "gridNum",
    "setGridNum",
    "leftPad",
    "setLeftPad",
    "topPad",
    "setTopPad",
    "svgRef",
    "createRef",
    "nums",
    "Object",
    "keys",
    "map",
    "item",
    "parseInt",
    "data",
    "current",
    "width",
    "clientWidth",
    "Math",
    "floor",
    "initStartDate",
    "getDay",
    "getTime",
    "newDate",
    "Array",
    "_",
    "idx",
    "cidx",
    "dayProps",
    "key",
    "fill",
    "height",
    "x",
    "y",
    "currentDate",
    "date",
    "dataProps",
    "row",
    "column",
    "index",
    "length",
    "count",
    "elm",
    "isValidElement"
  ],
  "sources": [
    "../src/SVG.tsx"
  ],
  "sourcesContent": [
    "import React, { useEffect, useMemo, useState } from 'react';\nimport { LabelsWeek } from './LabelsWeek';\nimport { LabelsMonth } from './LabelsMonth';\nimport { Rect } from './Rect';\nimport { formatData, getDateToString, existColor, numberSort, isValidDate, oneDayTime } from './utils';\nimport Legend, { LegendProps } from './Legend';\n\nexport type HeatMapValue = {\n  date: string;\n  content: string | string[] | React.ReactNode;\n  count: number;\n};\n\nexport type RectProps<T = SVGRectElement> = React.SVGProps<T>;\n\nexport interface SVGProps extends React.SVGProps<SVGSVGElement> {\n  startDate?: Date;\n  endDate?: Date;\n  rectSize?: number;\n  legendCellSize?: number;\n  space?: number;\n  rectProps?: RectProps;\n  legendRender?: LegendProps['legendRender'];\n  rectRender?: <E = SVGRectElement>(\n    data: E & { key: number },\n    valueItem: HeatMapValue & {\n      column: number;\n      row: number;\n      index: number;\n    },\n  ) => React.ReactElement | void;\n  value?: Array<HeatMapValue>;\n  weekLabels?: string[] | false;\n  monthLabels?: string[] | false;\n  panelColors?: Record<number, string>;\n}\n\nexport default function SVG(props: SVGProps) {\n  const {\n    rectSize = 11,\n    legendCellSize = 11,\n    space = 2,\n    startDate = new Date(),\n    endDate,\n    rectProps,\n    rectRender,\n    legendRender,\n    value = [],\n    weekLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    monthLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    panelColors = { 0: '#EBEDF0', 8: '#7BC96F', 4: '#C6E48B', 12: '#239A3B', 32: '#196127' },\n    ...other\n  } = props || {};\n  const [gridNum, setGridNum] = useState(0);\n  const [leftPad, setLeftPad] = useState(!!weekLabels ? 28 : 5);\n  const [topPad, setTopPad] = useState(!!monthLabels ? 20 : 5);\n  const svgRef = React.createRef<SVGSVGElement>();\n  const nums = useMemo(() => numberSort(Object.keys(panelColors).map((item) => parseInt(item, 10))), [panelColors]);\n  const data = useMemo(() => formatData(value), [value]);\n  useEffect(() => setLeftPad(!!weekLabels ? 28 : 5), [weekLabels]);\n  useEffect(() => {\n    if (svgRef.current) {\n      const width = svgRef.current.clientWidth - leftPad || 0;\n      setGridNum(Math.floor(width / (rectSize + space)) || 0);\n    }\n  }, [rectSize, svgRef, space, leftPad]);\n\n  useEffect(() => {\n    setTopPad(!!monthLabels ? 20 : 5);\n  }, [monthLabels]);\n\n  const initStartDate = useMemo(() => {\n    if (isValidDate(startDate)) {\n      return !startDate.getDay() ? startDate : new Date(startDate.getTime() - startDate.getDay() * oneDayTime);\n    } else {\n      const newDate = new Date();\n      return new Date(newDate.getTime() - newDate.getDay() * oneDayTime);\n    }\n  }, [startDate]);\n\n  return (\n    <svg ref={svgRef} {...other}>\n      {legendCellSize !== 0 && (\n        <Legend\n          legendRender={legendRender}\n          panelColors={panelColors}\n          rectSize={rectSize}\n          legendCellSize={legendCellSize}\n          leftPad={leftPad}\n          topPad={topPad}\n          space={space}\n        />\n      )}\n      <LabelsWeek weekLabels={weekLabels} rectSize={rectSize} space={space} topPad={topPad} />\n      <LabelsMonth\n        monthLabels={monthLabels}\n        rectSize={rectSize}\n        space={space}\n        leftPad={leftPad}\n        colNum={gridNum}\n        startDate={initStartDate}\n      />\n      <g transform={`translate(${leftPad}, ${topPad})`}>\n        {gridNum > 0 &&\n          [...Array(gridNum)].map((_, idx) => {\n            return (\n              <g key={idx} data-column={idx}>\n                {[...Array(7)].map((_, cidx) => {\n                  const dayProps: RectProps = {\n                    ...rectProps,\n                    key: cidx,\n                    fill: '#EBEDF0',\n                    width: rectSize,\n                    height: rectSize,\n                    x: idx * (rectSize + space),\n                    y: (rectSize + space) * cidx,\n                  };\n                  const currentDate = new Date(initStartDate.getTime() + oneDayTime * (idx * 7 + cidx));\n                  const date = getDateToString(currentDate);\n                  const dataProps = {\n                    ...data[date],\n                    date: date,\n                    row: cidx,\n                    column: idx,\n                    index: idx * 7 + cidx,\n                  };\n\n                  if (endDate instanceof Date && currentDate.getTime() > endDate.getTime()) {\n                    return null;\n                  }\n                  if (date && data[date] && panelColors && Object.keys(panelColors).length > 0) {\n                    dayProps.fill = existColor(data[date].count || 0, nums, panelColors);\n                  } else if (panelColors && panelColors[0]) {\n                    dayProps.fill = panelColors[0];\n                  }\n                  if (rectRender && typeof rectRender === 'function') {\n                    const elm = rectRender({ ...dayProps, key: cidx }, dataProps);\n                    if (elm && React.isValidElement(elm)) {\n                      return elm;\n                    }\n                  }\n                  return (\n                    <Rect\n                      {...dayProps}\n                      data-date={date}\n                      data-index={dataProps.index}\n                      data-row={dataProps.row}\n                      data-column={dataProps.column}\n                    />\n                  );\n                })}\n              </g>\n            );\n          })}\n      </g>\n    </svg>\n  );\n}\n"
  ],
  "mappings": "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"
}