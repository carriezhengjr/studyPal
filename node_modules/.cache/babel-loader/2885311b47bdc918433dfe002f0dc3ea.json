{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getBoundsForNode = getBoundsForNode;\nexports.getEventNodeFromPoint = getEventNodeFromPoint;\nexports.isEvent = isEvent;\nexports.objectsCollide = objectsCollide;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _contains = _interopRequireDefault(require(\"dom-helpers/contains\"));\n\nvar _closest = _interopRequireDefault(require(\"dom-helpers/closest\"));\n\nvar _listen = _interopRequireDefault(require(\"dom-helpers/listen\"));\n\nfunction addEventListener(type, handler) {\n  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  return (0, _listen.default)(target, type, handler, {\n    passive: false\n  });\n}\n\nfunction isOverContainer(container, x, y) {\n  return !container || (0, _contains.default)(container, document.elementFromPoint(x, y));\n}\n\nfunction getEventNodeFromPoint(node, _ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n  var target = document.elementFromPoint(clientX, clientY);\n  return (0, _closest.default)(target, '.rbc-event', node);\n}\n\nfunction isEvent(node, bounds) {\n  return !!getEventNodeFromPoint(node, bounds);\n}\n\nfunction getEventCoordinates(e) {\n  var target = e;\n\n  if (e.touches && e.touches.length) {\n    target = e.touches[0];\n  }\n\n  return {\n    clientX: target.clientX,\n    clientY: target.clientY,\n    pageX: target.pageX,\n    pageY: target.pageY\n  };\n}\n\nvar clickTolerance = 5;\nvar clickInterval = 250;\n\nvar Selection = /*#__PURE__*/function () {\n  function Selection(node) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$global = _ref2.global,\n        global = _ref2$global === void 0 ? false : _ref2$global,\n        _ref2$longPressThresh = _ref2.longPressThreshold,\n        longPressThreshold = _ref2$longPressThresh === void 0 ? 250 : _ref2$longPressThresh;\n\n    (0, _classCallCheck2.default)(this, Selection);\n    this.isDetached = false;\n    this.container = node;\n    this.globalMouse = !node || global;\n    this.longPressThreshold = longPressThreshold;\n    this._listeners = Object.create(null);\n    this._handleInitialEvent = this._handleInitialEvent.bind(this);\n    this._handleMoveEvent = this._handleMoveEvent.bind(this);\n    this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);\n    this._keyListener = this._keyListener.bind(this);\n    this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this);\n    this._dragOverFromOutsideListener = this._dragOverFromOutsideListener.bind(this); // Fixes an iOS 10 bug where scrolling could not be prevented on the window.\n    // https://github.com/metafizzy/flickity/issues/457#issuecomment-254501356\n\n    this._removeTouchMoveWindowListener = addEventListener('touchmove', function () {}, window);\n    this._removeKeyDownListener = addEventListener('keydown', this._keyListener);\n    this._removeKeyUpListener = addEventListener('keyup', this._keyListener);\n    this._removeDropFromOutsideListener = addEventListener('drop', this._dropFromOutsideListener);\n    this._removeDragOverFromOutsideListener = addEventListener('dragover', this._dragOverFromOutsideListener);\n\n    this._addInitialEventListener();\n  }\n\n  (0, _createClass2.default)(Selection, [{\n    key: \"on\",\n    value: function on(type, handler) {\n      var handlers = this._listeners[type] || (this._listeners[type] = []);\n      handlers.push(handler);\n      return {\n        remove: function remove() {\n          var idx = handlers.indexOf(handler);\n          if (idx !== -1) handlers.splice(idx, 1);\n        }\n      };\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(type) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var result;\n      var handlers = this._listeners[type] || [];\n      handlers.forEach(function (fn) {\n        if (result === undefined) result = fn.apply(void 0, args);\n      });\n      return result;\n    }\n  }, {\n    key: \"teardown\",\n    value: function teardown() {\n      this.isDetached = true;\n      this._listeners = Object.create(null);\n      this._removeTouchMoveWindowListener && this._removeTouchMoveWindowListener();\n      this._removeInitialEventListener && this._removeInitialEventListener();\n      this._removeEndListener && this._removeEndListener();\n      this._onEscListener && this._onEscListener();\n      this._removeMoveListener && this._removeMoveListener();\n      this._removeKeyUpListener && this._removeKeyUpListener();\n      this._removeKeyDownListener && this._removeKeyDownListener();\n      this._removeDropFromOutsideListener && this._removeDropFromOutsideListener();\n      this._removeDragOverFromOutsideListener && this._removeDragOverFromOutsideListener();\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(node) {\n      var box = this._selectRect;\n      if (!box || !this.selecting) return false;\n      return objectsCollide(box, getBoundsForNode(node));\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(items) {\n      var box = this._selectRect; //not selecting\n\n      if (!box || !this.selecting) return [];\n      return items.filter(this.isSelected, this);\n    } // Adds a listener that will call the handler only after the user has pressed on the screen\n    // without moving their finger for 250ms.\n\n  }, {\n    key: \"_addLongPressListener\",\n    value: function _addLongPressListener(handler, initialEvent) {\n      var _this = this;\n\n      var timer = null;\n      var removeTouchMoveListener = null;\n      var removeTouchEndListener = null;\n\n      var handleTouchStart = function handleTouchStart(initialEvent) {\n        timer = setTimeout(function () {\n          cleanup();\n          handler(initialEvent);\n        }, _this.longPressThreshold);\n        removeTouchMoveListener = addEventListener('touchmove', function () {\n          return cleanup();\n        });\n        removeTouchEndListener = addEventListener('touchend', function () {\n          return cleanup();\n        });\n      };\n\n      var removeTouchStartListener = addEventListener('touchstart', handleTouchStart);\n\n      var cleanup = function cleanup() {\n        if (timer) {\n          clearTimeout(timer);\n        }\n\n        if (removeTouchMoveListener) {\n          removeTouchMoveListener();\n        }\n\n        if (removeTouchEndListener) {\n          removeTouchEndListener();\n        }\n\n        timer = null;\n        removeTouchMoveListener = null;\n        removeTouchEndListener = null;\n      };\n\n      if (initialEvent) {\n        handleTouchStart(initialEvent);\n      }\n\n      return function () {\n        cleanup();\n        removeTouchStartListener();\n      };\n    } // Listen for mousedown and touchstart events. When one is received, disable the other and setup\n    // future event handling based on the type of event.\n\n  }, {\n    key: \"_addInitialEventListener\",\n    value: function _addInitialEventListener() {\n      var _this2 = this;\n\n      var removeMouseDownListener = addEventListener('mousedown', function (e) {\n        _this2._removeInitialEventListener();\n\n        _this2._handleInitialEvent(e);\n\n        _this2._removeInitialEventListener = addEventListener('mousedown', _this2._handleInitialEvent);\n      });\n      var removeTouchStartListener = addEventListener('touchstart', function (e) {\n        _this2._removeInitialEventListener();\n\n        _this2._removeInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);\n      });\n\n      this._removeInitialEventListener = function () {\n        removeMouseDownListener();\n        removeTouchStartListener();\n      };\n    }\n  }, {\n    key: \"_dropFromOutsideListener\",\n    value: function _dropFromOutsideListener(e) {\n      var _getEventCoordinates = getEventCoordinates(e),\n          pageX = _getEventCoordinates.pageX,\n          pageY = _getEventCoordinates.pageY,\n          clientX = _getEventCoordinates.clientX,\n          clientY = _getEventCoordinates.clientY;\n\n      this.emit('dropFromOutside', {\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n      e.preventDefault();\n    }\n  }, {\n    key: \"_dragOverFromOutsideListener\",\n    value: function _dragOverFromOutsideListener(e) {\n      var _getEventCoordinates2 = getEventCoordinates(e),\n          pageX = _getEventCoordinates2.pageX,\n          pageY = _getEventCoordinates2.pageY,\n          clientX = _getEventCoordinates2.clientX,\n          clientY = _getEventCoordinates2.clientY;\n\n      this.emit('dragOverFromOutside', {\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n      e.preventDefault();\n    }\n  }, {\n    key: \"_handleInitialEvent\",\n    value: function _handleInitialEvent(e) {\n      if (this.isDetached) {\n        return;\n      }\n\n      var _getEventCoordinates3 = getEventCoordinates(e),\n          clientX = _getEventCoordinates3.clientX,\n          clientY = _getEventCoordinates3.clientY,\n          pageX = _getEventCoordinates3.pageX,\n          pageY = _getEventCoordinates3.pageY;\n\n      var node = this.container(),\n          collides,\n          offsetData; // Right clicks\n\n      if (e.which === 3 || e.button === 2 || !isOverContainer(node, clientX, clientY)) return;\n\n      if (!this.globalMouse && node && !(0, _contains.default)(node, e.target)) {\n        var _normalizeDistance = normalizeDistance(0),\n            top = _normalizeDistance.top,\n            left = _normalizeDistance.left,\n            bottom = _normalizeDistance.bottom,\n            right = _normalizeDistance.right;\n\n        offsetData = getBoundsForNode(node);\n        collides = objectsCollide({\n          top: offsetData.top - top,\n          left: offsetData.left - left,\n          bottom: offsetData.bottom + bottom,\n          right: offsetData.right + right\n        }, {\n          top: pageY,\n          left: pageX\n        });\n        if (!collides) return;\n      }\n\n      var result = this.emit('beforeSelect', this._initialEventData = {\n        isTouch: /^touch/.test(e.type),\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n      if (result === false) return;\n\n      switch (e.type) {\n        case 'mousedown':\n          this._removeEndListener = addEventListener('mouseup', this._handleTerminatingEvent);\n          this._onEscListener = addEventListener('keydown', this._handleTerminatingEvent);\n          this._removeMoveListener = addEventListener('mousemove', this._handleMoveEvent);\n          break;\n\n        case 'touchstart':\n          this._handleMoveEvent(e);\n\n          this._removeEndListener = addEventListener('touchend', this._handleTerminatingEvent);\n          this._removeMoveListener = addEventListener('touchmove', this._handleMoveEvent);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"_handleTerminatingEvent\",\n    value: function _handleTerminatingEvent(e) {\n      var _getEventCoordinates4 = getEventCoordinates(e),\n          pageX = _getEventCoordinates4.pageX,\n          pageY = _getEventCoordinates4.pageY;\n\n      this.selecting = false;\n      this._removeEndListener && this._removeEndListener();\n      this._removeMoveListener && this._removeMoveListener();\n      if (!this._initialEventData) return;\n      var inRoot = !this.container || (0, _contains.default)(this.container(), e.target);\n      var bounds = this._selectRect;\n      var click = this.isClick(pageX, pageY);\n      this._initialEventData = null;\n\n      if (e.key === 'Escape') {\n        return this.emit('reset');\n      }\n\n      if (click && inRoot) {\n        return this._handleClickEvent(e);\n      } // User drag-clicked in the Selectable area\n\n\n      if (!click) return this.emit('select', bounds);\n      return this.emit('reset');\n    }\n  }, {\n    key: \"_handleClickEvent\",\n    value: function _handleClickEvent(e) {\n      var _getEventCoordinates5 = getEventCoordinates(e),\n          pageX = _getEventCoordinates5.pageX,\n          pageY = _getEventCoordinates5.pageY,\n          clientX = _getEventCoordinates5.clientX,\n          clientY = _getEventCoordinates5.clientY;\n\n      var now = new Date().getTime();\n\n      if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval) {\n        // Double click event\n        this._lastClickData = null;\n        return this.emit('doubleClick', {\n          x: pageX,\n          y: pageY,\n          clientX: clientX,\n          clientY: clientY\n        });\n      } // Click event\n\n\n      this._lastClickData = {\n        timestamp: now\n      };\n      return this.emit('click', {\n        x: pageX,\n        y: pageY,\n        clientX: clientX,\n        clientY: clientY\n      });\n    }\n  }, {\n    key: \"_handleMoveEvent\",\n    value: function _handleMoveEvent(e) {\n      if (this._initialEventData === null || this.isDetached) {\n        return;\n      }\n\n      var _this$_initialEventDa = this._initialEventData,\n          x = _this$_initialEventDa.x,\n          y = _this$_initialEventDa.y;\n\n      var _getEventCoordinates6 = getEventCoordinates(e),\n          pageX = _getEventCoordinates6.pageX,\n          pageY = _getEventCoordinates6.pageY;\n\n      var w = Math.abs(x - pageX);\n      var h = Math.abs(y - pageY);\n      var left = Math.min(pageX, x),\n          top = Math.min(pageY, y),\n          old = this.selecting; // Prevent emitting selectStart event until mouse is moved.\n      // in Chrome on Windows, mouseMove event may be fired just after mouseDown event.\n\n      if (this.isClick(pageX, pageY) && !old && !(w || h)) {\n        return;\n      }\n\n      this.selecting = true;\n      this._selectRect = {\n        top: top,\n        left: left,\n        x: pageX,\n        y: pageY,\n        right: left + w,\n        bottom: top + h\n      };\n\n      if (!old) {\n        this.emit('selectStart', this._initialEventData);\n      }\n\n      if (!this.isClick(pageX, pageY)) this.emit('selecting', this._selectRect);\n      e.preventDefault();\n    }\n  }, {\n    key: \"_keyListener\",\n    value: function _keyListener(e) {\n      this.ctrl = e.metaKey || e.ctrlKey;\n    }\n  }, {\n    key: \"isClick\",\n    value: function isClick(pageX, pageY) {\n      var _this$_initialEventDa2 = this._initialEventData,\n          x = _this$_initialEventDa2.x,\n          y = _this$_initialEventDa2.y,\n          isTouch = _this$_initialEventDa2.isTouch;\n      return !isTouch && Math.abs(pageX - x) <= clickTolerance && Math.abs(pageY - y) <= clickTolerance;\n    }\n  }]);\n  return Selection;\n}();\n/**\n * Resolve the disance prop from either an Int or an Object\n * @return {Object}\n */\n\n\nfunction normalizeDistance() {\n  var distance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if ((0, _typeof2.default)(distance) !== 'object') distance = {\n    top: distance,\n    left: distance,\n    right: distance,\n    bottom: distance\n  };\n  return distance;\n}\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n * @param  {Object|HTMLElement} a\n * @param  {Object|HTMLElement} b\n * @return {bool}\n */\n\n\nfunction objectsCollide(nodeA, nodeB) {\n  var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _getBoundsForNode = getBoundsForNode(nodeA),\n      aTop = _getBoundsForNode.top,\n      aLeft = _getBoundsForNode.left,\n      _getBoundsForNode$rig = _getBoundsForNode.right,\n      aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig,\n      _getBoundsForNode$bot = _getBoundsForNode.bottom,\n      aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;\n\n  var _getBoundsForNode2 = getBoundsForNode(nodeB),\n      bTop = _getBoundsForNode2.top,\n      bLeft = _getBoundsForNode2.left,\n      _getBoundsForNode2$ri = _getBoundsForNode2.right,\n      bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri,\n      _getBoundsForNode2$bo = _getBoundsForNode2.bottom,\n      bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;\n\n  return !( // 'a' bottom doesn't touch 'b' top\n  aBottom - tolerance < bTop || // 'a' top doesn't touch 'b' bottom\n  aTop + tolerance > bBottom || // 'a' right doesn't touch 'b' left\n  aRight - tolerance < bLeft || // 'a' left doesn't touch 'b' right\n  aLeft + tolerance > bRight);\n}\n/**\n * Given a node, get everything needed to calculate its boundaries\n * @param  {HTMLElement} node\n * @return {Object}\n */\n\n\nfunction getBoundsForNode(node) {\n  if (!node.getBoundingClientRect) return node;\n  var rect = node.getBoundingClientRect(),\n      left = rect.left + pageOffset('left'),\n      top = rect.top + pageOffset('top');\n  return {\n    top: top,\n    left: left,\n    right: (node.offsetWidth || 0) + left,\n    bottom: (node.offsetHeight || 0) + top\n  };\n}\n\nfunction pageOffset(dir) {\n  if (dir === 'left') return window.pageXOffset || document.body.scrollLeft || 0;\n  if (dir === 'top') return window.pageYOffset || document.body.scrollTop || 0;\n}\n\nvar _default = Selection;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}