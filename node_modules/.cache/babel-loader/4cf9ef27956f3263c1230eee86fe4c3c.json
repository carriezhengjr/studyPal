{"ast":null,"code":"var _jsxFileName = \"/Users/zjr/Documents/GitHub/studyPal/src/components/Countdown.js\";\nimport React, { Component } from \"react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Countdown extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      timerRunning: false,\n      // Is the timer running?\n      startTime: 0,\n      // Start time (in milliseconds).\n      totalTime: 0 // Total time (in ms) the timer has been running since start/reset.\n\n    };\n\n    this.startTimer = () => {\n      this.setState({\n        timerRunning: true,\n        startTime: this.state.totalTime,\n        totalTime: this.state.totalTime\n      });\n      this.timer = setInterval(() => {\n        const remainingTime = this.state.totalTime - 1000;\n\n        if (remainingTime >= 0) {\n          // Update total time accordingly.\n          this.setState({\n            totalTime: remainingTime\n          });\n        } else {\n          // Remaining time < 0,\n          // clear the interval, stop timer from running, alert user with a message.\n          clearInterval(this.timer);\n          this.setState({\n            timerRunning: false\n          });\n          alert(\"Congratulations! You have successfully completed your study session!\");\n        }\n      }, 1000);\n    };\n\n    this.stopTimer = () => {\n      clearInterval(this.timer);\n      this.setState({\n        timerRunning: false\n      });\n    };\n\n    this.resetTimer = () => {\n      if (this.state.timerRunning === false) {\n        // If timer has stopped running,\n        // reset totalTime to startTime.\n        this.setState({\n          totalTime: this.state.startTime\n        });\n      }\n    };\n\n    this.setDuration = input => {\n      const {\n        totalTime,\n        timerRunning\n      } = this.state;\n      const max = 216000000; // 60 hours.\n\n      if (!timerRunning) {\n        if (input === \"addHours\" && totalTime + 3600000 < max) {\n          this.setState({\n            totalTime: totalTime + 3600000\n          });\n        } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n          this.setState({\n            totalTime: totalTime - 3600000\n          });\n        } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n          this.setState({\n            totalTime: totalTime + 60000\n          });\n        } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n          this.setState({\n            totalTime: totalTime - 60000\n          });\n        } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n          this.setState({\n            totalTime: totalTime + 1000\n          });\n        } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n          this.setState({\n            totalTime: totalTime - 1000\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      totalTime,\n      startTime,\n      timerRunning\n    } = this.state; // Display time as 2 digits by concatenating a “0” in front (to correct 1 digit),\n    // then use slide() to take the last 2 digits (to correct results with more than 2 digits).\n    // e.g. totalTime = 5h 18min = 19 080 000 should be displayed as 05:18:00, \n    // i.e. seconds = 00, minutes = 018 = 18, hours = \"0\" + Math.floor(5.3) = 05.\n\n    let seconds = (\"0\" + Math.floor(totalTime / 1000 % 60) % 60).slice(-2);\n    let minutes = (\"0\" + Math.floor(totalTime / 60000 % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(totalTime / 3600000 % 60)).slice(-2);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-title\",\n        children: \"Countdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-labels\",\n        children: \"Hours : Minutes : Seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"countdown-setTime\",\n          onClick: () => this.setDuration(\"addHours\"),\n          children: \"\\u21E7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.setDuration(\"addMinutes\"),\n          children: \"\\u21E7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.setDuration(\"addSeconds\"),\n          children: \"\\u21E7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-time-display\",\n          children: [hours, \" : \", minutes, \" : \", seconds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.setDuration(\"minusHours\"),\n          children: \"\\u21E9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.setDuration(\"minusMinutes\"),\n          children: \"\\u21E9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.setDuration(\"decSeconds\"),\n          children: \"\\u21E9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), timerRunning === false && (startTime === 0 || totalTime === startTime) && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"countdown-start\",\n        onClick: this.startTimer,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), timerRunning === true && totalTime >= 1000 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"countdown-stop\",\n        onClick: this.stopTimer,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), timerRunning === false && startTime > 0 && startTime !== totalTime && totalTime !== 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"countdown-start\",\n        onClick: this.startTimer,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), (timerRunning === false || totalTime < 1000) && startTime > 0 && startTime !== totalTime && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"countdown-reset\",\n        onClick: this.resetTimer,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Countdown;","map":{"version":3,"names":["React","Component","Countdown","state","timerRunning","startTime","totalTime","startTimer","setState","timer","setInterval","remainingTime","clearInterval","alert","stopTimer","resetTimer","setDuration","input","max","render","seconds","Math","floor","slice","minutes","hours"],"sources":["/Users/zjr/Documents/GitHub/studyPal/src/components/Countdown.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Countdown extends Component {\n    state = {\n        timerRunning: false, // Is the timer running?\n        startTime: 0, // Start time (in milliseconds).\n        totalTime: 0 // Total time (in ms) the timer has been running since start/reset.\n    };\n\n    // Called when timer is started or resumed.\n    // Start the timer by setting it to running state, and setting current time as startTime and totalTime.\n    startTimer = () => {\n        this.setState({\n          timerRunning: true,\n          startTime: this.state.totalTime,\n          totalTime: this.state.totalTime\n        });\n\n        this.timer = setInterval(() => {\n            const remainingTime = this.state.totalTime - 1000;\n            if (remainingTime >= 0) {\n                // Update total time accordingly.\n                this.setState({\n                    totalTime: remainingTime\n                });\n            } else {\n                // Remaining time < 0,\n                // clear the interval, stop timer from running, alert user with a message.\n                clearInterval(this.timer);\n                this.setState({ timerRunning: false });\n                alert(\"Congratulations! You have successfully completed your study session!\");\n            }\n        }, 1000);\n    };\n\n    // Called when timer is stopped.\n    // Stop the timer by clearing the interval and stopping the timer from running.\n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.setState({ timerRunning: false });\n    };\n    \n    // Called when timer is reset.\n    resetTimer = () => {\n        if (this.state.timerRunning === false) {\n            // If timer has stopped running,\n            // reset totalTime to startTime.\n            this.setState({\n                totalTime: this.state.startTime\n            });\n        }\n    };\n\n    // Called to set desired duration (hours, minutes, seconds).\n    // 1 s = 1000 ms, 1 min = 60 000 ms, 1 h = 3 600 000 ms, 24 h = 86 400 000 ms.\n    // Each button checks if the input time is valid, i.e. lies within the time frame 0ms to 24h. \n    // If valid, update totalTime.\n    setDuration = input => {\n        const { totalTime, timerRunning } = this.state;\n        const max = 216000000; // 60 hours.\n        if (!timerRunning) {\n            if (input === \"addHours\" && totalTime + 3600000 < max) {\n                this.setState({ totalTime: totalTime + 3600000 });\n            } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n                this.setState({ totalTime: totalTime - 3600000 });\n            } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n                this.setState({ totalTime: totalTime + 60000 });\n            } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n                this.setState({ totalTime: totalTime - 60000 });\n            } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n                this.setState({ totalTime: totalTime + 1000 });\n            } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n                this.setState({ totalTime: totalTime - 1000 });\n            }\n        }\n    };\n      \n    render() {\n        const { totalTime, startTime, timerRunning } = this.state;\n        // Display time as 2 digits by concatenating a “0” in front (to correct 1 digit),\n        // then use slide() to take the last 2 digits (to correct results with more than 2 digits).\n        // e.g. totalTime = 5h 18min = 19 080 000 should be displayed as 05:18:00, \n        // i.e. seconds = 00, minutes = 018 = 18, hours = \"0\" + Math.floor(5.3) = 05.\n        let seconds = (\"0\" + (Math.floor((totalTime / 1000) % 60) % 60)).slice(-2);\n        let minutes = (\"0\" + Math.floor((totalTime / 60000) % 60)).slice(-2);\n        let hours = (\"0\" + Math.floor((totalTime / 3600000) % 60)).slice(-2);\n\n        return (\n        <div className=\"countdown\">\n            <div className=\"countdown-title\">Countdown</div>\n            <div className=\"countdown-labels\">Hours : Minutes : Seconds</div>\n            <div className=\"countdown-buttons\">\n                {/* Upwards White Arrow &#8679 */}\n                <button class = 'countdown-setTime' onClick={() => this.setDuration(\"addHours\")}>&#8679;</button>\n                <button onClick={() => this.setDuration(\"addMinutes\")}>&#8679;</button>\n                <button onClick={() => this.setDuration(\"addSeconds\")}>&#8679;</button>\n                \n                <div className=\"countdown-time-display\">\n                    {hours} : {minutes} : {seconds}\n                </div>\n                \n                {/* Downwards White Arrow &#8681 */}\n                <button onClick={() => this.setDuration(\"minusHours\")}>&#8681;</button>\n                <button onClick={() => this.setDuration(\"minusMinutes\")}>&#8681;</button>\n                <button onClick={() => this.setDuration(\"decSeconds\")}>&#8681;</button>\n            </div>\n            \n            {/* Start - Show button when timer stops running and (start time is 0 or equals total time). */}\n            {timerRunning === false && (startTime === 0 || totalTime === startTime) && (\n                <button className=\"countdown-start\" onClick={this.startTimer}>\n                    Start\n                </button>\n            )}\n            \n            {/* Stop - Show button when timer is running and time >= 1 second. */}\n            {timerRunning === true && totalTime >= 1000 && (\n                <button className=\"countdown-stop\" onClick={this.stopTimer}>\n                    Stop\n                </button>\n            )}\n            \n            {/* Resume - Show button when timer is not running and \n            (start time is not 0, and not equals total time, and total time not equals 0). */}\n            {timerRunning === false && (startTime > 0 && startTime !== totalTime && totalTime !== 0) && (\n                <button className=\"countdown-start\" onClick={this.startTimer}>\n                    Resume\n                </button>\n            )}\n            \n            {/* Reset - Show button when (timer is not running or total time < 1 second)\n            and (start time not equals total time. */}\n            {(timerRunning === false || totalTime < 1000) && (startTime > 0 && startTime !== totalTime) && (\n                <button className=\"countdown-reset\" onClick={this.resetTimer}>\n                    Reset\n                </button>\n            )}\n\n            </div>\n        );\n    }\n}\n\nexport default Countdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}