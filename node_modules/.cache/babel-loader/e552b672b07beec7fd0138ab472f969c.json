{"ast":null,"code":"import _slicedToArray from \"/Users/ongyongen/Desktop/studyPal-local/studyPal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ongyongen/Desktop/studyPal-local/studyPal/src/components/FocusSession/Countdown.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Popup from \"./Popup\";\nimport Title from '../Title/Title.js';\n\nfunction Countdown() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      timerRunning = _useState2[0],\n      setTimerRunning = _useState2[1]; // Is the timer running?\n\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      startTime = _useState4[0],\n      setStartTime = _useState4[1]; // Start time (in milliseconds).\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      totalTime = _useState6[0],\n      setTotalTime = _useState6[1]; // Total time (in ms) the timer will run.\n  // Pop-up page after countdown has stopped.\n\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      countdownEnd = _useState8[0],\n      setCountdownEnd = _useState8[1]; // Whenever timerRunning or totalTime changes, useEffect is called.\n\n\n  useEffect(function () {\n    var intervalId;\n\n    if (timerRunning) {\n      // If timer is running, start interval.\n      intervalId = setInterval(function () {\n        var remainingTime = totalTime - 1000;\n\n        if (remainingTime >= 0) {\n          // Update total time accordingly.\n          setTotalTime(remainingTime);\n        } else {\n          // Remaining time < 0,\n          // clear the interval, stop timer from running, alert user with a message.\n          clearInterval(intervalId);\n          setTimerRunning(false);\n          setStartTime(0);\n          setTotalTime(0);\n          setCountdownEnd(true); // alert(\"Congratulations! You have successfully completed your study session!\");\n        }\n      }, 1000);\n    } // Stop timer.\n\n\n    return function () {\n      clearInterval(intervalId);\n    };\n  }, [timerRunning, totalTime]); // Called when timer is started or resumed.\n  // Start the timer by setting it to running state, and setting current time as startTime and totalTime.\n\n  var startTimer = function startTimer() {\n    setTimerRunning(true);\n    setStartTime(totalTime);\n    setTotalTime(totalTime);\n  }; // Called when timer is stopped.\n  // Stop the timer by stopping it from running.\n\n\n  var stopTimer = function stopTimer() {\n    setTimerRunning(false);\n  }; // Called when timer is reset.\n\n\n  var resetTimer = function resetTimer() {\n    if (timerRunning === false) {\n      // If timer has stopped running,\n      // reset totalTime to startTime.\n      setTotalTime(0);\n      setStartTime(0);\n    }\n  }; // Called to set desired duration (hours, minutes, seconds).\n  // 1 s = 1000 ms, 1 min = 60 000 ms, 1 h = 3 600 000 ms, 24 h = 86 400 000 ms.\n  // Each button checks if the input time is valid, i.e. lies within the time frame 0ms to 24h. \n  // If valid, update totalTime.\n\n\n  var setDuration = function setDuration(input) {\n    var max = 86400000; // 24 hours.\n\n    if (!timerRunning) {\n      if (input === \"addHours\" && totalTime + 3600000 < max) {\n        setTotalTime(totalTime + 3600000);\n      } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n        setTotalTime(totalTime - 3600000);\n      } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n        setTotalTime(totalTime + 60000);\n      } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n        setTotalTime(totalTime - 60000);\n      } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n        setTotalTime(totalTime + 1000);\n      } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n        setTotalTime(totalTime - 1000);\n      }\n    }\n  }; // Display time as 2 digits by concatenating a “0” in front (to correct 1 digit),\n  // then use slide() to take the last 2 digits (to correct results with more than 2 digits).\n  // e.g. totalTime = 5h 18min = 19 080 000 should be displayed as 05:18:00, \n  // i.e. seconds = 00, minutes = 018 = 18, hours = \"0\" + Math.floor(5.3) = 05.\n\n\n  var seconds = (\"0\" + Math.floor(totalTime / 1000 % 60) % 60).slice(-2);\n  var minutes = (\"0\" + Math.floor(totalTime / 60000 % 60)).slice(-2);\n  var hours = (\"0\" + Math.floor(totalTime / 3600000 % 60)).slice(-2);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Hours Mins Seconds\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countdown-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    class: \"countdown-setTime\",\n    onClick: function onClick() {\n      return setDuration(\"addHours\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"\\u21E7\"), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"countdown-setTime\",\n    onClick: function onClick() {\n      return setDuration(\"addMinutes\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"\\u21E7\"), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"countdown-setTime\",\n    onClick: function onClick() {\n      return setDuration(\"addSeconds\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"\\u21E7\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countdown-timeDisplay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, hours, \" : \", minutes, \" : \", seconds), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"countdown-setTime\",\n    onClick: function onClick() {\n      return setDuration(\"minusHours\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"\\u21E9\"), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"countdown-setTime\",\n    onClick: function onClick() {\n      return setDuration(\"minusMinutes\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"\\u21E9\"), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"countdown-setTime\",\n    onClick: function onClick() {\n      return setDuration(\"minusSeconds\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"\\u21E9\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, timerRunning === false && (startTime === 0 || startTime === totalTime || totalTime === 0) && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"countdown-start\",\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"Start\"), timerRunning === true && totalTime >= 1000 && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"countdown-stop\",\n    onClick: stopTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, \"Stop\"), timerRunning === false && startTime > 0 && startTime !== totalTime && totalTime !== 0 && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"countdown-start\",\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"Resume\"), timerRunning === false && (startTime > 0 || startTime !== totalTime || totalTime > 0) && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"countdown-reset\",\n    onClick: resetTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, \"Reset\"))), /*#__PURE__*/React.createElement(Popup, {\n    trigger: countdownEnd,\n    setTrigger: setCountdownEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, \"Congratulations!\", /*#__PURE__*/React.createElement(\"i\", {\n    class: \"fa-solid fa-trophy fa-bounce fa-2x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"You have successfully completed your study session!\")));\n}\n\nexport default Countdown;","map":{"version":3,"names":["React","useEffect","useState","Popup","Title","Countdown","timerRunning","setTimerRunning","startTime","setStartTime","totalTime","setTotalTime","countdownEnd","setCountdownEnd","intervalId","setInterval","remainingTime","clearInterval","startTimer","stopTimer","resetTimer","setDuration","input","max","seconds","Math","floor","slice","minutes","hours"],"sources":["/Users/ongyongen/Desktop/studyPal-local/studyPal/src/components/FocusSession/Countdown.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Popup from \"./Popup\";\nimport Title from '../Title/Title.js'\n\n\nfunction Countdown() {\n\n    const [ timerRunning, setTimerRunning ] = useState(false); // Is the timer running?\n    const [ startTime, setStartTime ] = useState(0); // Start time (in milliseconds).\n    const [ totalTime, setTotalTime ] = useState(0); // Total time (in ms) the timer will run.\n\n    // Pop-up page after countdown has stopped.\n    const [countdownEnd, setCountdownEnd] = useState(false);\n\n    // Whenever timerRunning or totalTime changes, useEffect is called.\n    useEffect(() => {\n        let intervalId;\n        if (timerRunning) {\n            // If timer is running, start interval.\n            intervalId = setInterval(() => {\n                const remainingTime = totalTime - 1000;\n                if (remainingTime >= 0) {\n                    // Update total time accordingly.\n                    setTotalTime(remainingTime);\n                } else {\n                    // Remaining time < 0,\n                    // clear the interval, stop timer from running, alert user with a message.\n                    clearInterval(intervalId);\n                    setTimerRunning(false);\n                    setStartTime(0);\n                    setTotalTime(0);\n                    setCountdownEnd(true);\n                    // alert(\"Congratulations! You have successfully completed your study session!\");\n                }\n            }, 1000);\n        }\n\n        // Stop timer.\n        return() => {\n            clearInterval(intervalId);\n        }\n    }, [timerRunning, totalTime])\n\n    // Called when timer is started or resumed.\n    // Start the timer by setting it to running state, and setting current time as startTime and totalTime.\n    const startTimer = () => {\n        setTimerRunning(true);\n        setStartTime(totalTime);\n        setTotalTime(totalTime);\n    };\n\n    // Called when timer is stopped.\n    // Stop the timer by stopping it from running.\n    const stopTimer = () => {\n        setTimerRunning(false);\n    };\n    \n    // Called when timer is reset.\n    const resetTimer = () => {\n        if (timerRunning === false) {\n            // If timer has stopped running,\n            // reset totalTime to startTime.\n            setTotalTime(0);\n            setStartTime(0);\n        }\n    };\n\n    // Called to set desired duration (hours, minutes, seconds).\n    // 1 s = 1000 ms, 1 min = 60 000 ms, 1 h = 3 600 000 ms, 24 h = 86 400 000 ms.\n    // Each button checks if the input time is valid, i.e. lies within the time frame 0ms to 24h. \n    // If valid, update totalTime.\n    const setDuration = input => {\n        const max = 86400000; // 24 hours.\n        if (!timerRunning) {\n            if (input === \"addHours\" && totalTime + 3600000 < max) {\n                setTotalTime(totalTime + 3600000);\n            } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n                setTotalTime(totalTime - 3600000);\n            } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n                setTotalTime(totalTime + 60000);\n            } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n                setTotalTime(totalTime - 60000);\n            } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n                setTotalTime(totalTime + 1000);\n            } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n                setTotalTime(totalTime - 1000);\n            }\n        }\n    };\n    \n    // Display time as 2 digits by concatenating a “0” in front (to correct 1 digit),\n    // then use slide() to take the last 2 digits (to correct results with more than 2 digits).\n    // e.g. totalTime = 5h 18min = 19 080 000 should be displayed as 05:18:00, \n    // i.e. seconds = 00, minutes = 018 = 18, hours = \"0\" + Math.floor(5.3) = 05.\n    let seconds = (\"0\" + (Math.floor((totalTime / 1000) % 60) % 60)).slice(-2);\n    let minutes = (\"0\" + Math.floor((totalTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor((totalTime / 3600000) % 60)).slice(-2);\n\n    return (\n        <>\n        <div className=\"countdown\">\n            <p>Hours Mins Seconds</p>\n            <div className=\"countdown-buttons\">\n                {/* Upwards White Arrow &#8679 */}\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"addHours\")}>&#8679;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"addMinutes\")}>&#8679;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"addSeconds\")}>&#8679;</button>\n            \n                <div className=\"countdown-timeDisplay\">\n                    {hours} : {minutes} : {seconds}\n                </div>\n            \n                {/* Downwards White Arrow &#8681 */}\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"minusHours\")}>&#8681;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"minusMinutes\")}>&#8681;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"minusSeconds\")}>&#8681;</button>\n            </div>\n        \n            <div class=\"button-wrapper\">\n                {/* Start - Show button when timer is not running and \n                (start time is 0, or equals total time, or total time is 0). */}\n                {timerRunning === false && (startTime === 0 || startTime === totalTime || totalTime === 0) && (\n                    <button className=\"countdown-start\" onClick={startTimer}>\n                        Start\n                    </button>\n                )}\n        \n                {/* Stop - Show button when timer is running and time >= 1 second. */}\n                {timerRunning === true && totalTime >= 1000 && (\n                    <button className=\"countdown-stop\" onClick={stopTimer}>\n                        Stop\n                    </button>\n                )}\n            \n                {/* Resume - Show button when timer is not running and \n                (start time > 0, and not equals total time, and total time not equals 0). */}\n                {timerRunning === false && (startTime > 0 && startTime !== totalTime && totalTime !== 0) && (\n                    <button className=\"countdown-start\" onClick={startTimer}>\n                        Resume\n                    </button>\n                )}\n        \n                {/* Reset - Show button when timer is not running and \n                (start time > 0, or not equals total time, or total time > 0. */}\n                {timerRunning === false && (startTime > 0 || startTime !== totalTime || totalTime > 0) && (\n                    <button className=\"countdown-reset\" onClick={resetTimer}>\n                        Reset\n                    </button>\n                )}\n            </div>\n        </div>\n\n        <Popup trigger={countdownEnd} setTrigger={setCountdownEnd}>\n            <h1>Congratulations!<i class=\"fa-solid fa-trophy fa-bounce fa-2x\"></i></h1>\n            <h2>You have successfully completed your study session!</h2>\n        </Popup>\n\n        </>\n    );\n    \n}\n\nexport default Countdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}