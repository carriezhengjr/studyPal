{"ast":null,"code":"/*\nimport timer from \"./img/timer.jpg\";\n\nfunction Timer () {\n    return (\n        <div class='timer'>\n            <h1 class=\"title\">Timer</h1>\n            <div className='timer-img-container'>\n                <img src={timer} className=\"timer-image\"/>\n            </div>\n        </div> \n    )\n}\n\nexport default Timer;\n*/\nimport React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Timer extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      timerRunning: false,\n      // Is the timer running?\n      startTime: 0,\n      // Start time (in milliseconds).\n      totalTime: 0 // Total time (in ms) the timer has been running since start/reset.\n\n    };\n\n    this.startTimer = () => {\n      this.setState({\n        timerRunning: true,\n        startTime: this.state.totalTime,\n        totalTime: this.state.totalTime\n      });\n      this.timer = setInterval(() => {\n        const remainingTime = this.state.totalTime - 1000;\n\n        if (remainingTime >= 0) {\n          // Update total time accordingly.\n          this.setState({\n            totalTime: remainingTime\n          });\n        } else {\n          // Remaining time < 0,\n          // clear the interval, stop timer from running, alert user with a message.\n          clearInterval(this.timer);\n          this.setState({\n            timerRunning: false\n          });\n          alert(\"Congratulations! You have successfully completed your study session!\");\n        }\n      }, 1000);\n    };\n\n    this.stopTimer = () => {\n      clearInterval(this.timer);\n      this.setState({\n        timerRunning: false\n      });\n    };\n\n    this.resetTimer = () => {\n      if (this.state.timerRunning === false) {\n        // If timer has stopped running,\n        // reset totalTime to startTime.\n        this.setState({\n          totalTime: this.state.startTime\n        });\n      }\n    };\n\n    this.setDuration = input => {\n      const {\n        totalTime,\n        timerRunning\n      } = this.state;\n      const max = 216000000; // 60 hours.\n\n      if (!timerRunning) {\n        if (input === \"addHours\" && totalTime + 3600000 < max) {\n          this.setState({\n            totalTime: totalTime + 3600000\n          });\n        } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n          this.setState({\n            totalTime: totalTime - 3600000\n          });\n        } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n          this.setState({\n            totalTime: totalTime + 60000\n          });\n        } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n          this.setState({\n            totalTime: totalTime - 60000\n          });\n        } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n          this.setState({\n            totalTime: totalTime + 1000\n          });\n        } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n          this.setState({\n            totalTime: totalTime - 1000\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    const {\n      totalTime,\n      startTime,\n      timerRunning\n    } = this.state; // We are also formatting the times to display as 2 digits by concatenating a “0” on the front then slicing off the end if its more than 2 digits long.\n\n    let seconds = (\"0\" + Math.floor(totalTime / 1000 % 60) % 60).slice(-2);\n    let minutes = (\"0\" + Math.floor(totalTime / 60000 % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(totalTime / 3600000 % 60)).slice(-2);\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"names":["React","Component","Timer","state","timerRunning","startTime","totalTime","startTimer","setState","timer","setInterval","remainingTime","clearInterval","alert","stopTimer","resetTimer","setDuration","input","max","render","seconds","Math","floor","slice","minutes","hours"],"sources":["/Users/zjr/Documents/GitHub/studyPal/src/components/Timer.js"],"sourcesContent":["/*\nimport timer from \"./img/timer.jpg\";\n\nfunction Timer () {\n    return (\n        <div class='timer'>\n            <h1 class=\"title\">Timer</h1>\n            <div className='timer-img-container'>\n                <img src={timer} className=\"timer-image\"/>\n            </div>\n        </div> \n    )\n}\n\nexport default Timer;\n*/\n\nimport React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Timer extends Component {\n    state = {\n        timerRunning: false, // Is the timer running?\n        startTime: 0, // Start time (in milliseconds).\n        totalTime: 0 // Total time (in ms) the timer has been running since start/reset.\n    };\n\n    // Called when timer is started or resumed.\n    // Start the timer by setting it to running state, and setting current time as startTime and totalTime.\n    startTimer = () => {\n        this.setState({\n          timerRunning: true,\n          startTime: this.state.totalTime,\n          totalTime: this.state.totalTime\n        });\n\n        this.timer = setInterval(() => {\n            const remainingTime = this.state.totalTime - 1000;\n            if (remainingTime >= 0) {\n                // Update total time accordingly.\n                this.setState({\n                    totalTime: remainingTime\n                });\n            } else {\n                // Remaining time < 0,\n                // clear the interval, stop timer from running, alert user with a message.\n                clearInterval(this.timer);\n                this.setState({ timerRunning: false });\n                alert(\"Congratulations! You have successfully completed your study session!\");\n            }\n        }, 1000);\n    };\n\n    // Called when timer is stopped.\n    // Stop the timer by clearing the interval and stopping the timer from running.\n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.setState({ timerRunning: false });\n    };\n    \n    // Called when timer is reset.\n    resetTimer = () => {\n        if (this.state.timerRunning === false) {\n            // If timer has stopped running,\n            // reset totalTime to startTime.\n            this.setState({\n                totalTime: this.state.startTime\n            });\n        }\n    };\n\n    // Called to set desired duration (hours, minutes, seconds).\n    // 1 s = 1000 ms, 1 min = 60 000 ms, 1 h = 3 600 000 ms, 24 h = 86 400 000 ms.\n    // Each button checks if the input time is valid, i.e. lies within the time frame 0ms to 24h. \n    // If valid, update totalTime.\n    setDuration = input => {\n        const { totalTime, timerRunning } = this.state;\n        const max = 216000000; // 60 hours.\n        if (!timerRunning) {\n            if (input === \"addHours\" && totalTime + 3600000 < max) {\n                this.setState({ totalTime: totalTime + 3600000 });\n            } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n                this.setState({ totalTime: totalTime - 3600000 });\n            } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n                this.setState({ totalTime: totalTime + 60000 });\n            } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n                this.setState({ totalTime: totalTime - 60000 });\n            } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n                this.setState({ totalTime: totalTime + 1000 });\n            } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n                this.setState({ totalTime: totalTime - 1000 });\n            }\n        }\n    };\n      \n    render() {\n        const { totalTime, startTime, timerRunning } = this.state;\n        // We are also formatting the times to display as 2 digits by concatenating a “0” on the front then slicing off the end if its more than 2 digits long.\n        let seconds = (\"0\" + (Math.floor((totalTime / 1000) % 60) % 60)).slice(-2);\n        let minutes = (\"0\" + Math.floor((totalTime / 60000) % 60)).slice(-2);\n        let hours = (\"0\" + Math.floor((totalTime / 3600000) % 60)).slice(-2);\n    }\n}\n\nexport default Timer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}