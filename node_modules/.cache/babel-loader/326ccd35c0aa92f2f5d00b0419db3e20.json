{"ast":null,"code":"var _jsxFileName = \"/Users/zjr/Documents/GitHub/studyPal/src/components/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Countdown() {\n  _s();\n\n  const [timerRunning, setTimerRunning] = useState(false); // Is the timer running?\n\n  const [startTime, setStartTime] = useState(0); // Start time (in milliseconds).\n\n  const [totalTime, setTotalTime] = useState(0); // Total time (in ms) the timer will run.\n  // Pop-up page after countdown has stopped.\n\n  const [countdownEnd, setCountdownEnd] = useState(false); // Whenever timerRunning or totalTime changes, useEffect is called.\n\n  useEffect(() => {\n    let intervalId;\n\n    if (timerRunning) {\n      // If timer is running, start interval.\n      intervalId = setInterval(() => {\n        const remainingTime = totalTime - 1000;\n\n        if (remainingTime >= 0) {\n          // Update total time accordingly.\n          setTotalTime(remainingTime);\n        } else {\n          // Remaining time < 0,\n          // clear the interval, stop timer from running, alert user with a message.\n          clearInterval(intervalId);\n          setTimerRunning(false);\n          setStartTime(0);\n          setTotalTime(0);\n          setCountdownEnd(true); // alert(\"Congratulations! You have successfully completed your study session!\");\n        }\n      }, 1000);\n    } // Stop timer.\n\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [timerRunning, totalTime]); // Called when timer is started or resumed.\n  // Start the timer by setting it to running state, and setting current time as startTime and totalTime.\n\n  const startTimer = () => {\n    setTimerRunning(true);\n    setStartTime(totalTime);\n    setTotalTime(totalTime);\n  }; // Called when timer is stopped.\n  // Stop the timer by stopping it from running.\n\n\n  const stopTimer = () => {\n    setTimerRunning(false);\n  }; // Called when timer is reset.\n\n\n  const resetTimer = () => {\n    if (timerRunning === false) {\n      // If timer has stopped running,\n      // reset totalTime to startTime.\n      setTotalTime(0);\n      setStartTime(0);\n    }\n  }; // Called to set desired duration (hours, minutes, seconds).\n  // 1 s = 1000 ms, 1 min = 60 000 ms, 1 h = 3 600 000 ms, 24 h = 86 400 000 ms.\n  // Each button checks if the input time is valid, i.e. lies within the time frame 0ms to 24h. \n  // If valid, update totalTime.\n\n\n  const setDuration = input => {\n    const max = 86400000; // 24 hours.\n\n    if (!timerRunning) {\n      if (input === \"addHours\" && totalTime + 3600000 < max) {\n        setTotalTime(totalTime + 3600000);\n      } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n        setTotalTime(totalTime - 3600000);\n      } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n        setTotalTime(totalTime + 60000);\n      } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n        setTotalTime(totalTime - 60000);\n      } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n        setTotalTime(totalTime + 1000);\n      } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n        setTotalTime(totalTime - 1000);\n      }\n    }\n  }; // Display time as 2 digits by concatenating a “0” in front (to correct 1 digit),\n  // then use slide() to take the last 2 digits (to correct results with more than 2 digits).\n  // e.g. totalTime = 5h 18min = 19 080 000 should be displayed as 05:18:00, \n  // i.e. seconds = 00, minutes = 018 = 18, hours = \"0\" + Math.floor(5.3) = 05.\n\n\n  let seconds = (\"0\" + Math.floor(totalTime / 1000 % 60) % 60).slice(-2);\n  let minutes = (\"0\" + Math.floor(totalTime / 60000 % 60)).slice(-2);\n  let hours = (\"0\" + Math.floor(totalTime / 3600000 % 60)).slice(-2);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-title\",\n        children: \"Countdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-labels\",\n        children: \"Hours : Minutes : Seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"countdown-setTime\",\n          onClick: () => setDuration(\"addHours\"),\n          children: \"\\u21E7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"countdown-setTime\",\n          onClick: () => setDuration(\"addMinutes\"),\n          children: \"\\u21E7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"countdown-setTime\",\n          onClick: () => setDuration(\"addSeconds\"),\n          children: \"\\u21E7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-timeDisplay\",\n          children: [hours, \" : \", minutes, \" : \", seconds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"countdown-setTime\",\n          onClick: () => setDuration(\"minusHours\"),\n          children: \"\\u21E9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"countdown-setTime\",\n          onClick: () => setDuration(\"minusMinutes\"),\n          children: \"\\u21E9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"countdown-setTime\",\n          onClick: () => setDuration(\"minusSeconds\"),\n          children: \"\\u21E9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"button-wrapper\",\n        children: [timerRunning === false && (startTime === 0 || startTime === totalTime || totalTime === 0) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"countdown-start\",\n          onClick: startTimer,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), timerRunning === true && totalTime >= 1000 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"countdown-stop\",\n          onClick: stopTimer,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), timerRunning === false && startTime > 0 && startTime !== totalTime && totalTime !== 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"countdown-start\",\n          onClick: startTimer,\n          children: \"Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), timerRunning === false && (startTime > 0 || startTime !== totalTime || totalTime > 0) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"countdown-reset\",\n          onClick: resetTimer,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: countdownEnd,\n      setTrigger: setCountdownEnd,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Congratulations! You have successfully completed your study session! \", /*#__PURE__*/_jsxDEV(\"i\", {\n          class: \"fa-solid fa-trophy fa-bounce fa-2x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 87\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Countdown, \"+S81fzi5mojrdsE4K4om14NFxKs=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["React","useEffect","useState","Countdown","timerRunning","setTimerRunning","startTime","setStartTime","totalTime","setTotalTime","countdownEnd","setCountdownEnd","intervalId","setInterval","remainingTime","clearInterval","startTimer","stopTimer","resetTimer","setDuration","input","max","seconds","Math","floor","slice","minutes","hours"],"sources":["/Users/zjr/Documents/GitHub/studyPal/src/components/Countdown.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\n\nfunction Countdown() {\n\n    const [ timerRunning, setTimerRunning ] = useState(false); // Is the timer running?\n    const [ startTime, setStartTime ] = useState(0); // Start time (in milliseconds).\n    const [ totalTime, setTotalTime ] = useState(0); // Total time (in ms) the timer will run.\n\n    // Pop-up page after countdown has stopped.\n    const [countdownEnd, setCountdownEnd] = useState(false);\n\n    // Whenever timerRunning or totalTime changes, useEffect is called.\n    useEffect(() => {\n        let intervalId;\n        if (timerRunning) {\n            // If timer is running, start interval.\n            intervalId = setInterval(() => {\n                const remainingTime = totalTime - 1000;\n                if (remainingTime >= 0) {\n                    // Update total time accordingly.\n                    setTotalTime(remainingTime);\n                } else {\n                    // Remaining time < 0,\n                    // clear the interval, stop timer from running, alert user with a message.\n                    clearInterval(intervalId);\n                    setTimerRunning(false);\n                    setStartTime(0);\n                    setTotalTime(0);\n                    setCountdownEnd(true);\n                    // alert(\"Congratulations! You have successfully completed your study session!\");\n                }\n            }, 1000);\n        }\n\n        // Stop timer.\n        return() => {\n            clearInterval(intervalId);\n        }\n    }, [timerRunning, totalTime])\n\n    // Called when timer is started or resumed.\n    // Start the timer by setting it to running state, and setting current time as startTime and totalTime.\n    const startTimer = () => {\n        setTimerRunning(true);\n        setStartTime(totalTime);\n        setTotalTime(totalTime);\n    };\n\n    // Called when timer is stopped.\n    // Stop the timer by stopping it from running.\n    const stopTimer = () => {\n        setTimerRunning(false);\n    };\n    \n    // Called when timer is reset.\n    const resetTimer = () => {\n        if (timerRunning === false) {\n            // If timer has stopped running,\n            // reset totalTime to startTime.\n            setTotalTime(0);\n            setStartTime(0);\n        }\n    };\n\n    // Called to set desired duration (hours, minutes, seconds).\n    // 1 s = 1000 ms, 1 min = 60 000 ms, 1 h = 3 600 000 ms, 24 h = 86 400 000 ms.\n    // Each button checks if the input time is valid, i.e. lies within the time frame 0ms to 24h. \n    // If valid, update totalTime.\n    const setDuration = input => {\n        const max = 86400000; // 24 hours.\n        if (!timerRunning) {\n            if (input === \"addHours\" && totalTime + 3600000 < max) {\n                setTotalTime(totalTime + 3600000);\n            } else if (input === \"minusHours\" && totalTime - 3600000 >= 0) {\n                setTotalTime(totalTime - 3600000);\n            } else if (input === \"addMinutes\" && totalTime + 60000 < max) {\n                setTotalTime(totalTime + 60000);\n            } else if (input === \"minusMinutes\" && totalTime - 60000 >= 0) {\n                setTotalTime(totalTime - 60000);\n            } else if (input === \"addSeconds\" && totalTime + 1000 < max) {\n                setTotalTime(totalTime + 1000);\n            } else if (input === \"minusSeconds\" && totalTime - 1000 >= 0) {\n                setTotalTime(totalTime - 1000);\n            }\n        }\n    };\n    \n    // Display time as 2 digits by concatenating a “0” in front (to correct 1 digit),\n    // then use slide() to take the last 2 digits (to correct results with more than 2 digits).\n    // e.g. totalTime = 5h 18min = 19 080 000 should be displayed as 05:18:00, \n    // i.e. seconds = 00, minutes = 018 = 18, hours = \"0\" + Math.floor(5.3) = 05.\n    let seconds = (\"0\" + (Math.floor((totalTime / 1000) % 60) % 60)).slice(-2);\n    let minutes = (\"0\" + Math.floor((totalTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor((totalTime / 3600000) % 60)).slice(-2);\n\n    return (\n        <>\n        <div className=\"countdown\">\n            <div className=\"countdown-title\">Countdown</div>\n            <div className=\"countdown-labels\">Hours : Minutes : Seconds</div>\n            <div className=\"countdown-buttons\">\n                {/* Upwards White Arrow &#8679 */}\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"addHours\")}>&#8679;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"addMinutes\")}>&#8679;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"addSeconds\")}>&#8679;</button>\n            \n                <div className=\"countdown-timeDisplay\">\n                    {hours} : {minutes} : {seconds}\n                </div>\n            \n                {/* Downwards White Arrow &#8681 */}\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"minusHours\")}>&#8681;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"minusMinutes\")}>&#8681;</button>\n                <button class = 'countdown-setTime' onClick={() => setDuration(\"minusSeconds\")}>&#8681;</button>\n            </div>\n        \n            <div class=\"button-wrapper\">\n                {/* Start - Show button when timer is not running and \n                (start time is 0, or equals total time, or total time is 0). */}\n                {timerRunning === false && (startTime === 0 || startTime === totalTime || totalTime === 0) && (\n                    <button className=\"countdown-start\" onClick={startTimer}>\n                        Start\n                    </button>\n                )}\n        \n                {/* Stop - Show button when timer is running and time >= 1 second. */}\n                {timerRunning === true && totalTime >= 1000 && (\n                    <button className=\"countdown-stop\" onClick={stopTimer}>\n                        Stop\n                    </button>\n                )}\n            \n                {/* Resume - Show button when timer is not running and \n                (start time > 0, and not equals total time, and total time not equals 0). */}\n                {timerRunning === false && (startTime > 0 && startTime !== totalTime && totalTime !== 0) && (\n                    <button className=\"countdown-start\" onClick={startTimer}>\n                        Resume\n                    </button>\n                )}\n        \n                {/* Reset - Show button when timer is not running and \n                (start time > 0, or not equals total time, or total time > 0. */}\n                {timerRunning === false && (startTime > 0 || startTime !== totalTime || totalTime > 0) && (\n                    <button className=\"countdown-reset\" onClick={resetTimer}>\n                        Reset\n                    </button>\n                )}\n            </div>\n        </div>\n\n        <Popup trigger={countdownEnd} setTrigger={setCountdownEnd}>\n            <h1> Congratulations! You have successfully completed your study session! <i class=\"fa-solid fa-trophy fa-bounce fa-2x\"></i></h1>\n        </Popup>\n\n        </>\n    );\n    \n}\n\nexport default Countdown;"],"mappings":"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"},"metadata":{},"sourceType":"module"}