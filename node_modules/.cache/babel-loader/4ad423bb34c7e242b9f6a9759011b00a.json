{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createSuper\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _accessors = require(\"../../utils/accessors\");\n\nvar _DnDContext = require(\"./DnDContext\");\n\nvar EventWrapper = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2.default)(EventWrapper, _React$Component);\n\n  var _super = (0, _createSuper2.default)(EventWrapper);\n\n  function EventWrapper() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, EventWrapper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleResizeUp = function (e) {\n      if (e.button !== 0) return;\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'UP');\n    };\n\n    _this.handleResizeDown = function (e) {\n      if (e.button !== 0) return;\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'DOWN');\n    };\n\n    _this.handleResizeLeft = function (e) {\n      if (e.button !== 0) return;\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'LEFT');\n    };\n\n    _this.handleResizeRight = function (e) {\n      if (e.button !== 0) return;\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'RIGHT');\n    };\n\n    _this.handleStartDragging = function (e) {\n      if (e.button !== 0) return; // hack: because of the way the anchors are arranged in the DOM, resize\n      // anchor events will bubble up to the move anchor listener. Don't start\n      // move operations when we're on a resize anchor.\n\n      var isResizeHandle = e.target.className.includes('rbc-addons-dnd-resize');\n      if (!isResizeHandle) _this.context.draggable.onBeginAction(_this.props.event, 'move');\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(EventWrapper, [{\n    key: \"renderAnchor\",\n    value: function renderAnchor(direction) {\n      var cls = direction === 'Up' || direction === 'Down' ? 'ns' : 'ew';\n      return /*#__PURE__*/_react.default.createElement(\"div\", {\n        className: \"rbc-addons-dnd-resize-\".concat(cls, \"-anchor\"),\n        onMouseDown: this[\"handleResize\".concat(direction)]\n      }, /*#__PURE__*/_react.default.createElement(\"div\", {\n        className: \"rbc-addons-dnd-resize-\".concat(cls, \"-icon\")\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          event = _this$props.event,\n          type = _this$props.type,\n          continuesPrior = _this$props.continuesPrior,\n          continuesAfter = _this$props.continuesAfter,\n          resizable = _this$props.resizable;\n      var children = this.props.children;\n      if (event.__isPreview) return /*#__PURE__*/_react.default.cloneElement(children, {\n        className: (0, _clsx.default)(children.props.className, 'rbc-addons-dnd-drag-preview')\n      });\n      var draggable = this.context.draggable;\n      var draggableAccessor = draggable.draggableAccessor,\n          resizableAccessor = draggable.resizableAccessor;\n      var isDraggable = draggableAccessor ? !!(0, _accessors.accessor)(event, draggableAccessor) : true;\n      /* Event is not draggable, no need to wrap it */\n\n      if (!isDraggable) {\n        return children;\n      }\n      /*\n       * The resizability of events depends on whether they are\n       * allDay events and how they are displayed.\n       *\n       * 1. If the event is being shown in an event row (because\n       * it is an allDay event shown in the header row or because as\n       * in month view the view is showing all events as rows) then we\n       * allow east-west resizing.\n       *\n       * 2. Otherwise the event is being displayed\n       * normally, we can drag it north-south to resize the times.\n       *\n       * See `DropWrappers` for handling of the drop of such events.\n       *\n       * Notwithstanding the above, we never show drag anchors for\n       * events which continue beyond current component. This happens\n       * in the middle of events when showMultiDay is true, and to\n       * events at the edges of the calendar's min/max location.\n       */\n\n\n      var isResizable = resizable && (resizableAccessor ? !!(0, _accessors.accessor)(event, resizableAccessor) : true);\n\n      if (isResizable || isDraggable) {\n        /*\n         * props.children is the singular <Event> component.\n         * BigCalendar positions the Event abolutely and we\n         * need the anchors to be part of that positioning.\n         * So we insert the anchors inside the Event's children\n         * rather than wrap the Event here as the latter approach\n         * would lose the positioning.\n         */\n        var newProps = {\n          onMouseDown: this.handleStartDragging,\n          onTouchStart: this.handleStartDragging\n        };\n\n        if (isResizable) {\n          // replace original event child with anchor-embellished child\n          var StartAnchor = null;\n          var EndAnchor = null;\n\n          if (type === 'date') {\n            StartAnchor = !continuesPrior && this.renderAnchor('Left');\n            EndAnchor = !continuesAfter && this.renderAnchor('Right');\n          } else {\n            StartAnchor = !continuesPrior && this.renderAnchor('Up');\n            EndAnchor = !continuesAfter && this.renderAnchor('Down');\n          }\n\n          newProps.children = /*#__PURE__*/_react.default.createElement(\"div\", {\n            className: \"rbc-addons-dnd-resizable\"\n          }, StartAnchor, children.props.children, EndAnchor);\n        }\n\n        if (draggable.dragAndDropAction.interacting && // if an event is being dragged right now\n        draggable.dragAndDropAction.event === event // and it's the current event\n        ) {\n          // add a new class to it\n          newProps.className = (0, _clsx.default)(children.props.className, 'rbc-addons-dnd-dragged-event');\n        }\n\n        children = /*#__PURE__*/_react.default.cloneElement(children, newProps);\n      }\n\n      return children;\n    }\n  }]);\n  return EventWrapper;\n}(_react.default.Component);\n\nEventWrapper.contextType = _DnDContext.DnDContext;\nvar _default = EventWrapper;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}