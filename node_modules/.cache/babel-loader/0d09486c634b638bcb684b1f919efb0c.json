{"ast":null,"code":"import _slicedToArray from \"/Users/ongyongen/Desktop/studyPal-local/studyPal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ongyongen/Desktop/studyPal-local/studyPal/src/components/Calendar/CalendarScheduler.js\";\n\nimport React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport { db } from \"../../firebase\";\nimport { async } from \"@firebase/util\";\nimport { doc, setDoc, addDoc, collection, query, where, getDocs, onSnapshot, deleteDoc, updateDoc, QuerySnapshot, orderBy } from \"firebase/firestore\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport './Cal.css';\nimport Title from '../Title.js';\nvar localizer = momentLocalizer(moment);\n\nvar CalendarScheduler = function CalendarScheduler(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvent = _useState2[1];\n\n  var data = [{\n    start: new Date(),\n    end: new Date(),\n    title: \"hello\"\n  }, {\n    start: new Date(),\n    end: new Date(),\n    title: \"world\"\n  }];\n  /*\n    useEffect(() => {\n      let active = true\n      if (active == true) {\n        const q = query(collection(db, \"calendar\"))\n        const getAllTasks = onSnapshot(q, (querySnapshot) => {\n        let newEvents = []\n        querySnapshot.forEach((doc) => {\n          newEvents.push({...doc.data(), id:doc.id})\n          })\n        setEvent(() => newEvents)\n        console.log(newEvents)\n        console.log(events)\n        })}\n      return () => {active = false}\n      },[])\n    \n    const createNewEvent = async (e) => {\n      let confirmEventTitle = window.prompt(\"Create a new event\")\n      if (confirmEventTitle) {\n        let newEvent = {\n          start : e.start,\n          end: e.end,\n          title: confirmEventTitle\n        }\n        let newEvents = [...events, newEvent]\n        setEvent(() => newEvents)\n        await addDoc(collection(db, \"calendar\"), newEvent)\n      }\n    }\n  /*\n    const handleDelete = async (id) => {\n      await deleteDoc(doc(db, \"todos\", id))\n    }\n  \n    const deleteCurrentEvent = (e) => {\n      let confirmDeleteEvent = window.confirm(\"Delete this event?\")\n      if (confirmDeleteEvent) {\n        let newEvents = events.filter((event) => event.title != e.title)\n        setEvent(() => newEvents)\n      }\n    }*/\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Calendar, {\n    defaultDate: moment().toDate(),\n    defaultView: \"month\",\n    views: ['month', 'week'],\n    localizer: localizer,\n    events: data,\n    selectable: true,\n    onSelectSlot: createNewEvent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CalendarScheduler;","map":{"version":3,"names":["React","useEffect","useState","useCallback","db","async","doc","setDoc","addDoc","collection","query","where","getDocs","onSnapshot","deleteDoc","updateDoc","QuerySnapshot","orderBy","Calendar","momentLocalizer","moment","Title","localizer","CalendarScheduler","props","events","setEvent","data","start","Date","end","title","toDate","createNewEvent"],"sources":["/Users/ongyongen/Desktop/studyPal-local/studyPal/src/components/Calendar/CalendarScheduler.js"],"sourcesContent":["import React from 'react'\nimport { useEffect, useState, useCallback } from 'react'\n\nimport { db } from \"../../firebase\"\nimport { async } from \"@firebase/util\"\nimport {  doc, \n          setDoc, \n          addDoc, \n          collection, \n          query, \n          where,\n          getDocs, \n          onSnapshot,\n          deleteDoc,\n          updateDoc,\n          QuerySnapshot,\n          orderBy  } from \"firebase/firestore\"; \n\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport './Cal.css'\n\nimport Title from '../Title.js'\n\nconst localizer = momentLocalizer(moment);\n\nconst CalendarScheduler = (props) => {\n\n  const[events, setEvent] = useState([])\n\n  const data = [\n    {\n      start: new Date(),\n      end: new Date(),\n      title: \"hello\"\n    },\n    {\n      start: new Date(),\n      end: new Date(),\n      title: \"world\"\n    }\n  ]\n/*\n  useEffect(() => {\n    let active = true\n    if (active == true) {\n      const q = query(collection(db, \"calendar\"))\n      const getAllTasks = onSnapshot(q, (querySnapshot) => {\n      let newEvents = []\n      querySnapshot.forEach((doc) => {\n        newEvents.push({...doc.data(), id:doc.id})\n        })\n      setEvent(() => newEvents)\n      console.log(newEvents)\n      console.log(events)\n      })}\n    return () => {active = false}\n    },[])\n  \n  const createNewEvent = async (e) => {\n    let confirmEventTitle = window.prompt(\"Create a new event\")\n    if (confirmEventTitle) {\n      let newEvent = {\n        start : e.start,\n        end: e.end,\n        title: confirmEventTitle\n      }\n      let newEvents = [...events, newEvent]\n      setEvent(() => newEvents)\n      await addDoc(collection(db, \"calendar\"), newEvent)\n    }\n  }\n/*\n  const handleDelete = async (id) => {\n    await deleteDoc(doc(db, \"todos\", id))\n  }\n\n  const deleteCurrentEvent = (e) => {\n    let confirmDeleteEvent = window.confirm(\"Delete this event?\")\n    if (confirmDeleteEvent) {\n      let newEvents = events.filter((event) => event.title != e.title)\n      setEvent(() => newEvents)\n    }\n  }*/\n\n  return (\n      <div className=\"App\"> \n      <Calendar\n        defaultDate={moment().toDate()}\n        defaultView=\"month\"\n        views={['month','week']}\n        localizer={localizer}\n        events={data}\n        selectable\n        onSelectSlot={createNewEvent}\n      />   \n      </div>\n    );\n}\n\n\n\nexport default CalendarScheduler\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,SAASC,EAAT,QAAmB,gBAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAAUC,GAAV,EACUC,MADV,EAEUC,MAFV,EAGUC,UAHV,EAIUC,KAJV,EAKUC,KALV,EAMUC,OANV,EAOUC,UAPV,EAQUC,SARV,EASUC,SATV,EAUUC,aAVV,EAWUC,OAXV,QAW0B,oBAX1B;AAaA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,oBAA1C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,mDAAP;AACA,OAAO,WAAP;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAMC,SAAS,GAAGH,eAAe,CAACC,MAAD,CAAjC;;AAEA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;EAAA,gBAETtB,QAAQ,CAAC,EAAD,CAFC;EAAA;EAAA,IAE7BuB,MAF6B;EAAA,IAErBC,QAFqB;;EAInC,IAAMC,IAAI,GAAG,CACX;IACEC,KAAK,EAAE,IAAIC,IAAJ,EADT;IAEEC,GAAG,EAAE,IAAID,IAAJ,EAFP;IAGEE,KAAK,EAAE;EAHT,CADW,EAMX;IACEH,KAAK,EAAE,IAAIC,IAAJ,EADT;IAEEC,GAAG,EAAE,IAAID,IAAJ,EAFP;IAGEE,KAAK,EAAE;EAHT,CANW,CAAb;EAYF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,oBACI;IAAK,SAAS,EAAC,KAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACA,oBAAC,QAAD;IACE,WAAW,EAAEX,MAAM,GAAGY,MAAT,EADf;IAEE,WAAW,EAAC,OAFd;IAGE,KAAK,EAAE,CAAC,OAAD,EAAS,MAAT,CAHT;IAIE,SAAS,EAAEV,SAJb;IAKE,MAAM,EAAEK,IALV;IAME,UAAU,MANZ;IAOE,YAAY,EAAEM,cAPhB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADA,CADJ;AAaD,CAxED;;AA4EA,eAAeV,iBAAf"},"metadata":{},"sourceType":"module"}