{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _createSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createSuper\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _EventRow = _interopRequireDefault(require(\"../../EventRow\"));\n\nvar _Selection = _interopRequireWildcard(require(\"../../Selection\"));\n\nvar _eventLevels = require(\"../../utils/eventLevels\");\n\nvar _selection = require(\"../../utils/selection\");\n\nvar _common = require(\"./common\");\n\nvar _DnDContext = require(\"./DnDContext\");\n\nvar WeekWrapper = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2.default)(WeekWrapper, _React$Component);\n\n  var _super = (0, _createSuper2.default)(WeekWrapper);\n\n  function WeekWrapper() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, WeekWrapper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleMove = function (point, bounds, draggedEvent) {\n      if (!(0, _selection.pointInBox)(bounds, point)) return _this.reset();\n      var event = _this.context.draggable.dragAndDropAction.event || draggedEvent;\n      var _this$props = _this.props,\n          accessors = _this$props.accessors,\n          slotMetrics = _this$props.slotMetrics,\n          rtl = _this$props.rtl,\n          localizer = _this$props.localizer;\n      var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);\n      var date = slotMetrics.getDateForSlot(slot); // Adjust the dates, but maintain the times when moving\n\n      var _eventTimes = (0, _common.eventTimes)(event, accessors, localizer),\n          start = _eventTimes.start,\n          duration = _eventTimes.duration;\n\n      start = localizer.merge(date, start);\n      var end = localizer.add(start, duration, 'milliseconds'); // LATER: when dragging a multi-row event, only the first row is animating\n\n      _this.update(event, start, end);\n    };\n\n    _this.handleDropFromOutside = function (point, bounds) {\n      if (!_this.context.draggable.onDropFromOutside) return;\n      var _this$props2 = _this.props,\n          slotMetrics = _this$props2.slotMetrics,\n          rtl = _this$props2.rtl,\n          localizer = _this$props2.localizer;\n      var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);\n      var start = slotMetrics.getDateForSlot(slot);\n\n      _this.context.draggable.onDropFromOutside({\n        start: start,\n        end: localizer.add(start, 1, 'day'),\n        allDay: false\n      });\n    };\n\n    _this.handleDragOverFromOutside = function (point, node) {\n      if (!_this.context.draggable.dragFromOutsideItem) return;\n\n      _this.handleMove(point, node, _this.context.draggable.dragFromOutsideItem());\n    };\n\n    _this._selectable = function () {\n      var node = _this.ref.current.closest('.rbc-month-row, .rbc-allday-cell');\n\n      var container = node.closest('.rbc-month-view, .rbc-time-view');\n      var selector = _this._selector = new _Selection.default(function () {\n        return container;\n      });\n      selector.on('beforeSelect', function (point) {\n        var isAllDay = _this.props.isAllDay;\n        var action = _this.context.draggable.dragAndDropAction.action;\n        var bounds = (0, _Selection.getBoundsForNode)(node);\n        var isInBox = (0, _selection.pointInBox)(bounds, point);\n        return action === 'move' || action === 'resize' && (!isAllDay || isInBox);\n      });\n      selector.on('selecting', function (box) {\n        var bounds = (0, _Selection.getBoundsForNode)(node);\n        var dragAndDropAction = _this.context.draggable.dragAndDropAction;\n        if (dragAndDropAction.action === 'move') _this.handleMove(box, bounds);\n        if (dragAndDropAction.action === 'resize') _this.handleResize(box, bounds);\n      });\n      selector.on('selectStart', function () {\n        return _this.context.draggable.onStart();\n      });\n      selector.on('select', function (point) {\n        var bounds = (0, _Selection.getBoundsForNode)(node);\n        if (!_this.state.segment) return;\n\n        if (!(0, _selection.pointInBox)(bounds, point)) {\n          _this.reset();\n        } else {\n          _this.handleInteractionEnd();\n        }\n      });\n      selector.on('dropFromOutside', function (point) {\n        if (!_this.context.draggable.onDropFromOutside) return;\n        var bounds = (0, _Selection.getBoundsForNode)(node);\n        if (!(0, _selection.pointInBox)(bounds, point)) return;\n\n        _this.handleDropFromOutside(point, bounds);\n      });\n      selector.on('dragOverFromOutside', function (point) {\n        if (!_this.context.draggable.dragFromOutsideItem) return;\n        var bounds = (0, _Selection.getBoundsForNode)(node);\n\n        _this.handleDragOverFromOutside(point, bounds);\n      });\n      selector.on('click', function () {\n        return _this.context.draggable.onEnd(null);\n      });\n      selector.on('reset', function () {\n        _this.reset();\n\n        _this.context.draggable.onEnd(null);\n      });\n    };\n\n    _this.handleInteractionEnd = function () {\n      var _this$props3 = _this.props,\n          resourceId = _this$props3.resourceId,\n          isAllDay = _this$props3.isAllDay;\n      var event = _this.state.segment.event;\n\n      _this.reset();\n\n      _this.context.draggable.onEnd({\n        start: event.start,\n        end: event.end,\n        resourceId: resourceId,\n        isAllDay: isAllDay\n      });\n    };\n\n    _this._teardownSelectable = function () {\n      if (!_this._selector) return;\n\n      _this._selector.teardown();\n\n      _this._selector = null;\n    };\n\n    _this.state = {};\n    _this.ref = /*#__PURE__*/_react.default.createRef();\n    return _this;\n  }\n\n  (0, _createClass2.default)(WeekWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._selectable();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._teardownSelectable();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.state.segment) this.setState({\n        segment: null\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(event, start, end) {\n      var segment = (0, _eventLevels.eventSegments)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, event), {}, {\n        end: end,\n        start: start,\n        __isPreview: true\n      }), this.props.slotMetrics.range, _common.dragAccessors, this.props.localizer);\n      var lastSegment = this.state.segment;\n\n      if (lastSegment && segment.span === lastSegment.span && segment.left === lastSegment.left && segment.right === lastSegment.right) {\n        return;\n      }\n\n      this.setState({\n        segment: segment\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize(point, bounds) {\n      var _this$context$draggab = this.context.draggable.dragAndDropAction,\n          event = _this$context$draggab.event,\n          direction = _this$context$draggab.direction;\n      var _this$props4 = this.props,\n          accessors = _this$props4.accessors,\n          slotMetrics = _this$props4.slotMetrics,\n          rtl = _this$props4.rtl,\n          localizer = _this$props4.localizer;\n\n      var _eventTimes2 = (0, _common.eventTimes)(event, accessors, localizer),\n          start = _eventTimes2.start,\n          end = _eventTimes2.end;\n\n      var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);\n      var date = slotMetrics.getDateForSlot(slot);\n      var cursorInRow = (0, _selection.pointInBox)(bounds, point);\n\n      if (direction === 'RIGHT') {\n        if (cursorInRow) {\n          if (slotMetrics.last < start) return this.reset();\n          if (localizer.eq(localizer.startOf(end, 'day'), end)) end = localizer.add(date, 1, 'day');else end = date;\n        } else if (localizer.inRange(start, slotMetrics.first, slotMetrics.last) || bounds.bottom < point.y && +slotMetrics.first > +start) {\n          end = localizer.add(slotMetrics.last, 1, 'milliseconds');\n        } else {\n          this.setState({\n            segment: null\n          });\n          return;\n        }\n\n        var originalEnd = accessors.end(event);\n        end = localizer.merge(end, originalEnd);\n\n        if (localizer.lt(end, start)) {\n          end = originalEnd;\n        }\n      } else if (direction === 'LEFT') {\n        if (cursorInRow) {\n          if (slotMetrics.first > end) return this.reset();\n          start = date;\n        } else if (localizer.inRange(end, slotMetrics.first, slotMetrics.last) || bounds.top > point.y && localizer.lt(slotMetrics.last, end)) {\n          start = localizer.add(slotMetrics.first, -1, 'milliseconds');\n        } else {\n          this.reset();\n          return;\n        }\n\n        var originalStart = accessors.start(event);\n        start = localizer.merge(start, originalStart);\n\n        if (localizer.gt(start, end)) {\n          start = originalStart;\n        }\n      }\n\n      this.update(event, start, end);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          accessors = _this$props5.accessors;\n      var segment = this.state.segment;\n      return /*#__PURE__*/_react.default.createElement(\"div\", {\n        ref: this.ref,\n        className: \"rbc-addons-dnd-row-body\"\n      }, children, segment && /*#__PURE__*/_react.default.createElement(_EventRow.default, Object.assign({}, this.props, {\n        selected: null,\n        className: \"rbc-addons-dnd-drag-row\",\n        segments: [segment],\n        accessors: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, accessors), _common.dragAccessors)\n      })));\n    }\n  }]);\n  return WeekWrapper;\n}(_react.default.Component);\n\nWeekWrapper.contextType = _DnDContext.DnDContext;\nvar _default = WeekWrapper;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}